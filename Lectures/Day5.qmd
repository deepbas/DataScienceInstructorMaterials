---
title: "Advanced Data Visualization Tools"
title-slide-attributes:
  data-background-image: images/lake.jpg
  data-background-size: contain
  data-background-opacity: "0.5"
subtitle: "STAT 220"
author: "Bastola"
format:
  revealjs: 
    theme: [default, scss/main.scss]
    slide_level: 2
    slide-number: true
    preview-links: auto
    history: true
    chalkboard: true
    transition: slide
    background-transition: fade    
    touch: false
    controls: true
---

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
options(htmltools.preserve.raw = FALSE)
options(ggrepel.max.overlaps = Inf)

# load necessary packages
library(tidyverse)
library(dplyr)
library(countdown)
library(mosaic)
library(ggthemes)
library(xaringanExtra)
library(forcats)
library(patchwork)
library(DT)
library(knitr)
library(maps)
library(polite)
library(rvest)
library(mapproj)

select <- dplyr::select

# Set ggplot theme
# theme_set(theme_stata(base_size = 10))

yt <- 0

# covid dataset

table_usafacts <- bow(url = "https://usafacts.org/visualizations/coronavirus-covid-19-spread-map/") %>%
  scrape() %>% 
  html_elements(css = "table") %>% 
  html_table()

covid <- table_usafacts[[2]]
covid_clean <- covid %>% janitor::clean_names() %>%
  mutate_at(4:5, parse_number) %>% mutate(state = str_to_lower(state))

states <- map_data("state")
covid_data <- left_join(states, covid_clean, by = c("region" = "state"))


# Final dataset
set.seed(516)
x1 <- rnorm(60, 20, 3)
x2 <- rnorm(60, 36, 2.5)
x1 <- data.frame(x=x1, type="Lake #1")
x2 <- data.frame(x=x2, type="Lake #2")
data <- rbind(x1,x2)
colnames(data) <- c("Depth", "Location")

# read.csv("https://raw.githubusercontent.com/deepbas/statdatasets/main/agstrat.csv")

```



## Changing scales and colors

::: font70
::: green-h
Functions that control the mapping of your data to aesthetic attributes like color, fill, and shape.

```{r eval=FALSE}
scale_<aes>_<method>()
```
:::
:::


::: eqt
::: font60
Some common scale functions:

- `scale_fill_manual()` : Manually define the fill colors for different categories
- `scale_fill_brewer()` : Use color palettes from the `ColorBrewer` library
- `scale_color_viridis()` : Use the viridis color scale for continuous data.
- `scale_shape_manual()` : Manually define the shapes for different categories.
- `scale_x_log10()`: Transform the x-axis to a logarithmic scale.
- `scale_y_reverse()`: Reverse the direction of the y-axis.
- `scale_color_gradient()`: Define a custom color gradient for continuous data.
- `scale_fill_discrete()`: Use a predefined color palette for discrete data.

:::
:::



::: middle-align-xy

## Recommended reading:

- [Using colors in R](http://stat545.com/block018_colors.html)

- [Dealing with colors in ggplot2](https://r-graph-gallery.com/ggplot2-color.html)

- [Taking control of qualitative colors in ggplot2](http://stat545.com/block019_enforce-color-scheme.html)

- [Data journalism](https://datajournalism.com/read/)

- [R Color Brewer](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3)

:::

## Example

Let's make Lake #1 `steelblue` and Lake #2 `maroon`

::: panel-tabset

### Plot

```{r scale-fill1, echo=FALSE,  fig.align='center'}
ggplot(data) +
  geom_histogram(
    aes(x = Depth, fill = Location), 
    binwidth = 1,
    color = "gold")+
    scale_fill_manual(values = c("steelblue", "maroon"))
```

### Code


```{r scale-fill2, eval=FALSE, fig.height = 2.5, fig.width = 4.5, out.width="60%", fig.align='center'}
ggplot(data) +
  geom_histogram(
    aes(x = Depth, fill = Location), 
    binwidth = 1,
    color = "gold")+
    scale_fill_manual(values = c("steelblue", "maroon"))
```


:::


## Changing themes

::: row
::: left


::: mre
**Theme:** The non-data ink on your plots

Examples:

- background color
- tick marks
- grid lines
- legend position 
- legend appearance

:::
:::

::: right

<br>

```{r echo=FALSE, warning=FALSE, message=FALSE, fig.height = 4, fig.width = 5, out.width="90%", fig.align='center', fig.cap='Top to bottom: solarized, bw, and dark themes resp.'}
library(patchwork)

p1 <- ggplot(data) +
  geom_histogram(
    aes(x = Depth, fill = Location), 
    binwidth = 1,
    color = "lightblue") +
    scale_fill_manual(values = c("steelblue", "maroon")) + 
    theme(legend.position = "right") +
    theme_solarized()


p2 <- p1 + theme_bw()

p3 <- p1 + theme_dark() 

pthemes <- p1 + p2 + p3 + plot_layout(ncol = 1)
pthemes
```

:::
:::

::: footer
Click for various basic [ggplot2 themes](https://ggplot2.tidyverse.org/reference/ggtheme.html)  and for [ggthemes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/)
:::


## Annotations

::: panel-tabset

### Plot

```{r annotate1, echo=FALSE, fig.align='center'}
library(ggthemes)
ggplot(data) +
  geom_histogram(
    aes(x = Depth, fill = Location), 
    binwidth = 1,
    color = "lightblue") +
    scale_fill_manual(values = c("steelblue", "maroon")) + 
    theme_solarized() +
    theme(legend.position = "none") +
    annotate("text", x = 20, y = 15, label = "Lake #1", color = "steelblue") + #<<
    annotate("text", x = 39, y = 15, label = "Lake #2", color = "maroon") #<<
```


### Code


```{r annotate2, fig.height = 3, fig.width = 4.5, out.width="50%", fig.align='center', eval=FALSE}
library(ggthemes)
ggplot(data) +
  geom_histogram(
    aes(x = Depth, fill = Location), 
    binwidth = 1,
    color = "lightblue") +
    scale_fill_manual(values = c("steelblue", "maroon")) + 
    theme_solarized() +
    theme(legend.position = "none") +
    annotate("text", x = 20, y = 15, label = "Lake #1", color = "steelblue") + 
    annotate("text", x = 39, y = 15, label = "Lake #2", color = "maroon")
```

:::


## Changing coordinates


::: cle
::: font60

By default, `ggplot2` uses a Cartesian coordinate system, but there are others available!

- `coord_cartesian`: Adjusts the x and y axis limits without modifying the data.
- `coord_equal`: Ensures equal scaling for the x and y axes.
- `coord_fixed`: Sets a fixed aspect ratio for the plot.
- `coord_flip`: Flips the x and y axes.
- `coord_map`: Projects the plot onto a map projection. 
- `coord_polar`: Transforms the plot to a polar coordinate system.
- `coord_quickmap`: Provides an approximation for a map projection.
- `coord_sf`: Designed for use with sf objects (spatial data).
- `coord_trans`: Transforms the plot's x and y axes using specified transformations.  

:::
:::



## Polar Coordinates


::: panel-tabset

### Plot

```{r, echo=FALSE}
ggplot(data = mpg) +
 geom_bar(mapping = aes(x = class, fill = class)) +
 coord_polar(theta = "x")
```

### Code

```{r, eval=FALSE}
ggplot(data = mpg) +
 geom_bar(mapping = aes(x = class, fill = class)) +
 coord_polar(theta = "x")
```

:::



## **ggplot2** maps

::: bql
::: font80

The `ggplot2` package contains latitude and longitude to define geographic boundaries

- some regions: `state`, `usa`, `world`, `county`
- see `?map_data` or `?maps` for more regions (may need to install `maps`)
:::
:::

```{r}
states <- map_data("state")
glimpse(states)
```




## What is a map?

A set of latitude longitude points...

```{r, fig.height = 4, fig.width =7, out.width="60%", fig.align='center'}
ggplot(states) + geom_point(aes(long, lat))
```



## What is a map?

... that are connected with lines in a very specific order.

```{r, fig.height = 4, fig.width =7, out.width = "60%", fig.align='center'}
ggplot(states) + geom_path(aes(long, lat, group = group))
```




::: middle-align-xy

## Necessary map data

::: bq

- latitude/longitude points for all map boundaries
- which boundary group all lat/long points belong 
- the order to connect points within each group
:::

:::


## Adding state-level information

::: eqt
-  Add other geographic information by adding geometric layers to the plot
-  Add non-geographic information by altering the fill color for each state

  + Use `geom = "polygon"` to treat states as solid shapes to add color
  + Incorporate numeric information using color shade or intensity
  + Incorporate categorical information using color hue

:::


## Maps using *geom_polygon*

::: green-h
`geom_polygon` connects the dots between lat (`y`) and long (`x`) points in a given `group`.  It connects start and end points which allows you to `fill` a closed polygon shape
:::


```{r, fig.align='center'}
ggplot(states, aes(x=long, y=lat, group=group)) + 
    geom_polygon(color="black", fill="lightblue")
```


::: middle-align-xy

## Application: Covid mapping

```{r}
glimpse(covid)
```

::: footer
Source: https://usafacts.org/visualizations/coronavirus-covid-19-spread-map/
:::


:::



## Application: Combining datasets

We need to add the covid info to the state polygon data set

```{r}
states <- map_data("state")
covid_data <- left_join(states, covid_clean, by = c("region" = "state"))
```

```{r echo=FALSE}
print(as_tibble(covid_data), n = 5)
```



## COVID Cases 

```{r, fig.height = 4, fig.width = 7, out.width="60%", fig.align='center'}
Covid_cases_map <- ggplot(covid_data) + 
  geom_polygon(aes(long, lat, group = group, fill = cases))
Covid_cases_map
```




## Adjusting the coordinate system 

::: panel-tabset

### Plot

```{r better-plot1, echo=FALSE, fig.align='center'}
breaks <- round(seq(min(covid_data$cases), 
                    max(covid_data$cases), 
                    length.out = 10))
Covid_cases_map + coord_map() + theme_map() + 
  scale_fill_fermenter(type = "div", palette = "Spectral", breaks = breaks) + 
  labs(title = "COVID-19 Cases by State") +
  theme(legend.position="right")
```


### Code

```{r better-plot2, eval=FALSE}
breaks <- round(seq(min(covid_data$cases), 
                    max(covid_data$cases), 
                    length.out = 10))
Covid_cases_map + coord_map() + theme_map() + 
  scale_fill_fermenter(type = "div", palette = "Spectral", breaks = breaks) + 
  labs(title = "COVID-19 Cases by State") +
  theme(legend.position="right")
```

:::


## Adjusting the color: alternate way

::: panel-tabset

### Plot

```{r better-plot3, echo=FALSE, fig.align='center'}
library(viridis)
ggplot(covid_data) + 
  geom_polygon(aes(long, lat, group = group, fill = cases)) +
  scale_fill_viridis_c(option = "viridis", trans = "log10", labels = scales::comma,
                       guide = guide_colorbar(title.position = "top")) +
  labs(fill = "cases", title = "COVID-19 Cases by State") +
  coord_map() + theme_map() +
  theme(legend.position="right")
```

### Code

```{r, eval=FALSE}
library(viridis)
ggplot(covid_data) + 
  geom_polygon(aes(long, lat, group = group, fill = cases)) +
  scale_fill_viridis_c(option = "viridis", 
                       trans = "log10", 
                       labels = scales::comma,
                       guide = guide_colorbar(title.position = "top")) +
  labs(fill = "cases", title = "COVID-19 Cases by State") +
  coord_map() + theme_map() +
  theme(legend.position="right")
```

:::

## Cloropleth maps

::: green-h
::: font70
Uses color or shading of sub regions to visual data. Displays divided geographical areas or regions that are colored in relation to a numeric variable.
:::
:::

```{r}
ACS <- read.csv("https://raw.githubusercontent.com/deepbas/statdatasets/main/ACS.csv")
ACS <- dplyr::filter(ACS, !(region  %in% c("Alaska", "Hawaii"))) # only 48+D.C.
ACS$region <- tolower(ACS$region)  # lower case (match states regions)
glimpse(ACS)
```



## Cloropleth maps using [geom_map]{.bold-text}

Don't need to merge `ACS` and `states` data! 

```{r,  fig.height = 4, fig.width = 7, out.width="60%", fig.align='center'}
ggplot(data=ACS) + coord_map() + 
  geom_map(aes(map_id = region, fill = PercentInState), map = states) +
  expand_limits(x=states$long, y=states$lat) + ggtitle("% Born in State")
```






::: centered-content
## <i class="fa fa-pencil-square-o" style="font-size:48px;color:purple"> Group Activity `r (yt <- yt + 1)`</i> {background="#ffdf9e"}

::: row
::: left
![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)
:::

::: right
::: lqt
- Please clone the `ca5-yourusername` repository from  [Github](https://github.com/DataScienceSpring24)
- Please do the problems on the class activity for today
- Submit to Gradescope on [moodle](https://moodle.carleton.edu/course/view.php?id=43692) when done!
:::
:::
:::

`r countdown(minutes = 30, seconds = 00, top = 0 , left = 0, color_background = "inherit", padding = "3px 4px", font_size = "1em")`
:::
