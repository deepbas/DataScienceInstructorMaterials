{
  "hash": "1f45ec0d822e3ba0c899010f27b072a3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Iteration and functionals\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"STAT 220\"\nauthor: \"Bastola\"\nformat:\n  revealjs: \n    theme: [default, scss/main.scss]\n    slide_level: 2\n    slide-number: true\n    preview-links: auto\n    history: true\n    chalkboard: true\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\n---\n\n\n\n\n\n\n\n## Why repeat ourselves?\n\n::: {.row .bq}\n::: left\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  case      x     y     z\n  <chr> <dbl> <dbl> <dbl>\n1 a         5     3    -2\n2 b         7     1    -5\n3 c         9    12    -3\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n::: right\n\nFind the mean of each columns\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5.333333\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -3.333333\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n[It would be nice to iterate this process so that the same function/operation can be ran multiple times]{.note}\n\n\n\n\n## For loops\n\n::: note\nWhat is a For loop? \n\n- A for loop is a way to iterate through a series of items stored as a data object in R.\n:::\n\n<br>\n\n::: scroll-box-12\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"grapes\"\n[1] \"bananas\"\n[1] \"chocolate\"\n[1] \"bread\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## `for` loop components\n\n::: bq\nthe `for()` function is used to specify\n\n  - what object we're drawing from and\n  - what object we are writing to\n:::\n\n::: scroll-box-20\n```\nfor(i  in  items)\n     ^        ^\n     |        |\n     |        |___ object we are drawing from\n     |\n     |\nobj. we write each item to\n\n```\n:::\n\n\n## `for` loop components\n\n::: bq\n\nThe `brackets {}`\n\n  - Inside the brackets we house the code that is going to happen each iteration\n:::\n\n<br>\n\n::: scroll-box-12\n\n```\nfor( i  in  items  ){\n  |~~~~~~~~~~~~~~~~|   \n  |~~~~~~~~~~~~~~~~|\n  |~~~~~~~~~~~~~~~~| code we need perform on each iteration.\n  |~~~~~~~~~~~~~~~~|\n  |~~~~~~~~~~~~~~~~|\n  }\n\n```\n\n:::\n\n\n\n\n\n## `for` loops `tinydata`\n\n::: scroll-box-12\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  case      x     y     z\n  <chr> <dbl> <dbl> <dbl>\n1 a         5     3    -2\n2 b         7     1    -5\n3 c         9    12    -3\n```\n\n\n:::\n:::\n\n\n\n- Let’s iterate calculation of column means:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  7.000000  5.333333 -3.333333\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n## Function for conditional evaluation\n\n::: cle \n::: font90\n\nif x is numeric then standardize, else just return x\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.2649111 -0.6324555  0.0000000  0.6324555  1.2649111\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2\"  \"4\"  \"6\"  \"8\"  \"10\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -1.1618950 -0.3872983  0.3872983  1.1618950         NA\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n## Standardizing tinydata\n\n::: scroll-box-12\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  case      x      y      z\n  <chr> <dbl>  <dbl>  <dbl>\n1 a        -1 -0.398  0.873\n2 b         0 -0.740 -1.09 \n3 c         1  1.14   0.218\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n::: centered-content\n\n## <i class=\"fa fa-pencil-square-o\" style=\"font-size:48px;color:purple\"> Group Activity 1</i> {background=\"#ffdf9e\"}\n\n::: row\n::: left\n![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)\n:::\n\n::: right\n\n<br>\n\n::: lqt\n\n- Please clone the `ca15-yourusername` repository from  [Github](https://github.com/DataScienceSpring24)\n- Please do the problem 1 in the class activity for today\n:::\n:::\n:::\n\npreserve6e9d2d08f8421599\n:::\n\n\n## Functionals\n\n::: fsp\n\nFunctional function will apply the same operation (function) to each element of a vector, matrix, data frame or list.\n\n::: row\n::: left\n<img src=\"images/purrr.png\" width=300>\n:::\n\n::: right\n\n  - base-R: `apply` family of commands\n  - `purrr` package: `map` family of commands\n  \n:::\n:::\n\n:::\n\n## `apply` family of commands\n\n::: bq\nR has a family of commands that apply a function to different parts of a vector, matrix or data frame\n\n\n<blockquote>\n<p style=\"color: #502090\"; font-size: 18px;> lapply(X, FUN): applies FUN to each element in the vector/list X </p> \n<p style=\"color: #502090; font-size: 20px;\"> Example: lapply(tinydata, FUN = mean) </p>\n</blockquote>\n\n\n\n<blockquote>\n<p style=\"color: #502090\"; font-size: 18px;> sapply(X, FUN): works like lapply, but returns a vector</p> \n<p style=\"color: #502090; font-size: 20px;\"> Example: sapply(tinydata, FUN = mean) </p>\n</blockquote>\n\n:::\n\n\n## `purrr` package\n\n::: cle\n\npowerful package for iteration with the same functionality as apply commands, but more readable \n\n\n<img src=\"images/map.png\" width=700 class=\"center\">\n\n- `map(.x, .f)` maps the function `.f` to elements in the vector/list `.x`\n\n:::\n\n## `lapply` with `tinydata`\n::: mre\n::: font80\n::: row\n::: left\n\n<br>\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n$case\n[1] NA\n\n$x\n[1] 7\n\n$y\n[1] 5.333333\n\n$z\n[1] -3.333333\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: right\n::: {.ws .font70}\n- a 3x4 data frame is summarized in a list of length 4.\n- R sees `tinydata` as a list whose elements are column vectors (variables)\n- the FUN is applied to each list element \n- a list is returned\n- length is the number of variables in the data frame\n:::\n:::\n:::\n:::\n:::\n\n## `purrr::map`\n\n::: prm\n\nIn `purrr`, the `map` function is equivalent to `lapply`\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n$case\n[1] NA\n\n$x\n[1] 7\n\n$y\n[1] 5.333333\n\n$z\n[1] -3.333333\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n## `purrr::map_dbl`\n\n::: mre\n`map_dbl` is equivalent to `sapply`\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n     case         x         y         z \n       NA  7.000000  5.333333 -3.333333 \n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: ws\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n     case         x         y         z \n       NA  7.000000  5.333333 -3.333333 \n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n## `purrr::map_df`\n\n::: cle\n\n`map_df` returns a data frame instead of a vector\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n   case     x     y     z\n  <dbl> <dbl> <dbl> <dbl>\n1    NA     7  5.33 -3.33\n```\n\n\n:::\n:::\n\n\n\n- No equivalency in base-R `apply`!\n\n:::\n\n\n\n## Functionals: single function that mutates\n\n::: mre\n\n`standardize` function gives us a list of standardized values\n\n::: row\n::: left\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  case      x     y     z\n  <chr> <dbl> <dbl> <dbl>\n1 a         5     3    -2\n2 b         7     1    -5\n3 c         9    12    -3\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: right\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n$case\n[1] \"a\" \"b\" \"c\"\n\n$x\n[1] -1  0  1\n\n$y\n[1] -0.3982161 -0.7395442  1.1377602\n\n$z\n[1]  0.8728716 -1.0910895  0.2182179\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n- a 3x4 data frame is mutated to a list of 4 vectors of length 3 each\n\n:::\n\n\n## `purrr::map_df`\n\n::: mre\n\nIn `purrr`, the `map_df` is equal to `lapply` + `bind_cols`:\n\n::: row\n::: left\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  case      x     y     z\n  <chr> <dbl> <dbl> <dbl>\n1 a         5     3    -2\n2 b         7     1    -5\n3 c         9    12    -3\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n::: right\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  case      x      y      z\n  <chr> <dbl>  <dbl>  <dbl>\n1 a        -1 -0.398  0.873\n2 b         0 -0.740 -1.09 \n3 c         1  1.14   0.218\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n- a 3x4 data frame is mutated to [standardized] 3x4 data frame\n\n:::\n\n## applying multiple functions\n\n::: prm\n\n- Let’s get the 0.1 and 0.9 quantile for variables in `tinydata`\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n10% 90% \n5.4 8.6 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n 10%  90% \n 1.4 10.2 \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n 10%  90% \n-4.6 -2.2 \n```\n\n\n:::\n:::\n\n\n\n-  the function output is a vector of length 2 (same lengths as probs)\n\n:::\n\n\n## `map_dfr`: Getting Quantiles\n\n::: prm\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  variable `10%` `90%`\n  <chr>    <dbl> <dbl>\n1 x          5.4   8.6\n2 y          1.4  10.2\n3 z         -4.6  -2.2\n```\n\n\n:::\n:::\n\n\n\nOptionally use `.id` to record the variable names from `tinydata`:\n\n:::\n\n\n\n## `map_dfc`: Getting Quantiles\n\n::: prm\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n      x     y     z\n  <dbl> <dbl> <dbl>\n1   5.4   1.4  -4.6\n2   8.6  10.2  -2.2\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: centered-content\n## <i class=\"fa fa-pencil-square-o\" style=\"font-size:48px;color:purple\"> Group Activity 2</i> {background=\"#ffdf9e\"}\n\n::: row\n::: left\n![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)\n:::\n\n::: right\n\n<br>\n\n::: lqt\n\n- Please do the remaining problems in the class activity.\n- Submit to Gradescope on [moodle](https://moodle.carleton.edu/course/view.php?id=43692) when done!\n:::\n:::\n:::\n\npreserve09df93e9f9cf2033\n:::\n\n\n<!--\n\n\n::: full-slide-html\n\n##\n\n\n\n```{=html}\n<iframe width=\"1080\" height=\"1000\" src=\"https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKAZwAtaJWAlAB0IIgMQACACJwAZnzgSAqgEkJsoowlpUE0tyikJAE2YB3Ttom9OpIgHNmMCQFo3LkQFdaEgDwv1am9jAAUoezh2EREJCUkAQXQ9WlJqRXcPCFjSFLSwiDhqKLAACULqIgkAZV5+AEIhMAFcaKy46tpjOHoWCWooViJPIzMU7gk+VGHtCGMJIdIpoy75CBTaEksMmIlOTu6WABkBhajRNtjJKv2erVQoAup1TQmIJa33Hdi9rtv8wrOX1i7RUb2GiGqdC6Wg0Wn0iggnhg9DgWiIsgk9D4HzcQO+UNRoKW7EmwxUcwAvBJGliIJxGi0LsDmSzgf0UU8qY0AHJIlFojG0ziIBl41nimB8CRUgCMjPFCuBMCgAA9pRIAKwABnlioVADcoEFFFSAMxa4TnZnNVrMyQAWSgUvuj2eWmMtE4qH6rD49nmw3erk+TOVfH+RVtLMkAHlA+CJCVPXZHLBg7imbFvURSHHFsN2AsluT1Y0PbYQhVSI1LUDLbFLbWIJIZKtFJxUfrUX0HLQCBJGHAAI7eQdzOwmcxWGwppzpzIdxhdrT+dSeCAEHIkElg0i4AP50gCCQgKOSJO2Bxz9F6biKGPUOYAMSd+lknieAHE4KxF9JDFA847JIoz6AOw6eHAthwHMiLIt2N5CsBEgACo2BIcAqqgg6cHsJC3oYEgRAUzDkJYgEzleaaehIZjMOgMGvFYBBGtQyEToOsyopWOZ6JUfAeix5AEaQIptGIyEyhgEgqEYNGNIOUCbrQXaNDM453oOsLttwQyPpiihQMMRDKjkLHUNQrDIcCg4uJhcAEMMjFmHeWSkqQlg7ksAAkQrHgQBgQBEyEAEzSbJlhFtMpCsKgig0YB2bVm0UWkN55akDxRirpx0JZewp5WsCarAqusivtw77UN5Zivn6QJCn4AQdkO7CShA7Aqs0EjKiqnXdWkQX6BgCzqu5vnYhIADUEgyk2zIzp1+5MHAUAANaWFSQr7sQnLUmAYgAOwavE8RSAAQgymKaNCpZgC5KRwKKmbMiq7J3QA6nVQXJPAfESAUKpGKinioFuWQ7j12LCHgYpKk6WRcqUyZUc4N61esP05PA9JNFGsQAL5NgTrSSAAwopwk1HwrDaEk2x0rUrCJKg7DeOq3j7ouy7qtzqKWmABMALpAA\" title=\"Webpage example\"></iframe>\n```\n\n\n\n\n:::\n\n-->\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"Day15_files/libs/countdown/countdown.css\" rel=\"stylesheet\" />\n<script src=\"Day15_files/libs/countdown/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {
      "preserve09df93e9f9cf2033": "<div class=\"countdown\" id=\"timer_c8f93ec0\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;left:0;padding:3px 4px;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>",
      "preserve6e9d2d08f8421599": "<div class=\"countdown\" id=\"timer_00fb6c97\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;left:0;padding:3px 4px;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>"
    },
    "postProcess": true
  }
}