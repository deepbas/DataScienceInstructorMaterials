{
  "hash": "dec1388440f423aad7097a094077b34f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Objects in R\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"STAT 220\"\nauthor: \"Bastola\"\nformat:\n  revealjs: \n    theme: [default, scss/main.scss]\n    slide_level: 2\n    slide-number: true\n    preview-links: auto\n    history: true\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\n---\n\n\n\n\n\n## Object Oriented Programming in R\n\n<br>\n\n::: bql\n-   R uses object-oriented programming (OOP) principles\n-   Functions in R are designed to work with specific object classes and types\n-   Example: `plot()` function behaves differently based on the input object\n:::\n\n## `plot()` Function Examples\n\n::: bq\nScatterplot with `plot()`:\n\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n<br>\n\n::: bq\nDiagnostic plots with `plot()`:\n\n\n\n::: {.cell}\n\n:::\n\n\n:::\n\n<br>\n\nThe `plot()` function adapts its behavior based on the input object's class and type\n\n## Data structures and types in R\n\n<br>\n\n::: bq\n-   R objects are based on vectors\n-   Two functions to examine objects:\n    -   `typeof()`: Returns the storage mode (data type) of an object\n    -   `class()`: Provides further description of an object\n-   NULL: Represents an empty object (vector of length 0)\n:::\n\n## Examples of Data Types and Functions\n\n::: columns\n::: {.column width=\"50%\"}\n::: eqt\nNumeric and integer data types:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: eqt\nLogical data type and class:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n:::\n\n## Atomic Vectors and lists\n\n::: columns\n::: {.column width=\"50%\"}\n<img src=\"images/atomic_vectors.png\" width=\"110%\" height=\"110%\"/> <br>\n:::\n\n::: {.column width=\"50%\"}\n::: bqt\nR uses two types of vectors to store info\n\n-   **atomic vectors**: all entries have the same data type\n-   **lists**: entries can contain other objects that can differ in data type\n:::\n:::\n:::\n\n## Examples of Vector Types\n\n::: bq\nAtomic vector (numeric):\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n:::\n\n<br>\n\n::: bq\nList with multiple data types:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n:::\n\n## Atomic Vectors: Matrices\n\n::: green-h\nYou can add **attributes**, such as **dimension**, to vectors. A **matrix** is a 2-dimensional vector containing entries of the same type\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n::: font60\n**Creating a matrix with dimensions:**\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n::: font60\n**Adding dimensions to a vector:**\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## Creating Matrices Using Vector Binding\n\n::: green-h\nBind vectors of the same length to create columns or rows. Use `cbind()` for column binding and `rbind()` for row binding\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n::: font60\nColumn binding with `cbind()`:\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n     x y\n[1,] 1 2\n[2,] 2 4\n[3,] 3 6\n[4,] 4 8\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n::: font60\nRow binding with `rbind()`:\n:::\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   [,1] [,2] [,3] [,4]\nx1    1    2    3    4\nx2    2    4    6    8\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## Implicit and Explicit Coercion in R\n\n::: columns\n::: {.column width=\"50%\"}\n::: bq\n::: font80\nImplicit Coercion\n\n-   R defaults to the most complex data type if more than one type is given\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"    \"2\"    \"a\"    \"TRUE\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: bq\n::: font80\nExplicit coercion\n\n-   Intentionally force a different data type from the \"default\" type\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"    \"2\"    \"a\"    \"TRUE\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n:::\n:::\n\n## Logical Vectors coercion\n\n::: bq\nLogical values coerced into 0 for `FALSE` and 1 for `TRUE` when applying math functions\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE FALSE FALSE\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\nMean of a Logical Vector\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.25\n```\n\n\n:::\n:::\n\n\n:::\n\n## Examples: Coercion of Logical Values\n\n::: bq\nSum of Logical Values\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4\n```\n\n\n:::\n:::\n\n\n:::\n\n<br>\n\n::: bq\nMean of Logical Values\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.3333333\n```\n\n\n:::\n:::\n\n\n:::\n\n## Data types: factors\n\nFactors are a class of data that are stored as **integers**\n\n::: columns\n::: {.column width=\"50%\"}\n::: bq\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"no\"  \"yes\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: bql\n::: font60\nThe attribute `levels` is a character vector of possible values\n\n-   Values are stored as the integers (1=first `level`, 2=second `level`, etc.)\n-   Levels are ordered alphabetically/numerically (unless specified otherwise)\n:::\n:::\n:::\n:::\n\n\n\n## Subsetting: Atomic Vector and Matrices\n\n\n::: bq\n::: font70\n\n\n-   subset with `[]` by referencing index value (from 1 to vector length):\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 2 1 3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 2\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 1\n```\n\n\n:::\n:::\n\n\n\n\n\n-   subset with a logical vector\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 1\n```\n\n\n:::\n:::\n\n\n\n:::\n:::\n\n\n## Subsetting: Matrices\n\n::: eqt\nAccess entries using subsetting `[row,column]`\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n     x y\n[1,] 1 2\n[2,] 2 4\n[3,] 3 6\n[4,] 4 8\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2\n```\n\n\n:::\n:::\n\n\n:::\n\n## Subsetting: Atomic Vector and Matrices\n\n::: font90\n::: columns\n::: {.column width=\"50%\"}\n::: bq\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  x double_x\n1 8       16\n2 2        4\n3 1        2\n4 3        6\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 2 1 3\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n::: {.column width=\"50%\"}\n::: bq\nor access columns with `$`\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 8 2 1 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n:::\n:::\n\n\n::: middle-align-xy\n\n## Tibbles\n\n::: bq\n\n-   are a new modern data frame\n-   never changes the input data types\n-   can have columns that are lists\n-   can have non-standard variable names\n-   can start with a number or contain spaces\n:::\n:::\n\n## Subsetting data frames\n\n::: bq\n-   Can also use column names to subset:\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 2\n  name  sex  \n  <chr> <chr>\n1 Mary  F    \n2 Anna  F    \n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Lists: Flexible Data Containers \n\n\n::: lqt\n\nList is a vector with entries that can be different object types\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n$myVec\n[1] 8 2 1 3\n\n$myDf\n  x double_x\n1 8       16\n2 2        4\n3 1        2\n4 3        6\n\n$myString\n[1] \"hi\"  \"bye\"\n```\n\n\n:::\n:::\n\n\n:::\n\n## Accessing List Elements\n\n::: lqt\nLike a data frame, use the \\$ to access named objects stored in the list\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  x double_x\n1 8       16\n2 2        4\n3 1        2\n4 3        6\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n:::\n\n## Subsetting Lists with Single Brackets\n\n::: bq\n-   One `[]` operator gives you the object at the given location but preserves the list type\n-   `my_list[2]` returns a list of length one with entry `myDf`\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n$myDf\n  x double_x\n1 8       16\n2 2        4\n3 1        2\n4 3        6\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 1\n $ myDf:'data.frame':\t4 obs. of  2 variables:\n  ..$ x       : num [1:4] 8 2 1 3\n  ..$ double_x: num [1:4] 16 4 2 6\n```\n\n\n:::\n:::\n\n\n:::\n\n## Subsetting Lists with Double Brackets\n\n::: bq\n-   The double `[[]]` operator gives you the object stored at that location (equivalent to using \\$)\n-   `my_list[[2]]` or `my_list[[\"myDf\"]]` return the data frame `myDf`\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n  x double_x\n1 8       16\n2 2        4\n3 1        2\n4 3        6\n```\n\n\n:::\n:::\n\n\n:::\n\n\n::: centered-content\n## <i class=\"fa fa-pencil-square-o\" style=\"font-size:48px;color:purple\">Â GroupÂ ActivityÂ 1</i> {background=\"#ffdf9e\"}\n\n::: row\n::: left\n![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)\n:::\n\n::: right\n::: lqt\n- Please clone the `ca3-yourusername` repository from  [Github](https://github.com/DataScienceSpring24)\n- Please do the problems on the class activity for today\n- Submit to Gradescope on [moodle](https://moodle.carleton.edu/course/view.php?id=43692) when done!\n:::\n:::\n:::\n\npreservedd194c4af5da2f84\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"Day3_files/libs/countdown/countdown.css\" rel=\"stylesheet\" />\n<script src=\"Day3_files/libs/countdown/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {
      "preservedd194c4af5da2f84": "<div class=\"countdown\" id=\"timer_2be00fe8\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;left:0;padding:3px 4px;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">20</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>"
    },
    "postProcess": true
  }
}