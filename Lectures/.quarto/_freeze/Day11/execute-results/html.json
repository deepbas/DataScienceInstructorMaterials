{
  "hash": "312c4a39e42ca253489c0f908aa3a329",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Basic String Manipulation\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"STAT 220\"\nauthor: \"Bastola\"\nformat:\n  revealjs: \n    theme: [default, scss/main.scss]\n    slide_level: 2\n    slide-number: true\n    preview-links: auto\n    history: true\n    chalkboard: true\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\n---\n\n\n\n\n\n\n## Let's Define Strings\n\n::: eqt\n::: font80\n\n- A [string]{.yellow-h} is any sequence of characters\n- Define a string by surrounding text with either single quotes or double quotes.\n\n\n\n\n::: {.cell}\n\n:::\n\n\n  \n\nThe `cat()` or `writeLines()` function displays a string as it is represented inside R.\n\n::: row\n::: left\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nHello!\n```\n\n\n:::\n:::\n\n\n:::\n::: right\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nHello!\n```\n\n\n:::\n:::\n\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns <- `Hello`    # backquotes do not define a string\ns <- \"10\"\"    # error - unclosed quotes\n```\n:::\n\n\n\n:::\n:::\n:::\n\n## String Parsing\n\n::: cle\n::: font80\n\n[Definition]{.bold-text}: pulling apart some text or `string` to do something with it\n\n<!-- manipulate (or parse) textual data by looking for patterns in a string -->\n\nThe most common tasks in string processing include:\n\n  + [extracting]{.green-h} numbers from strings, e.g. [\"12%\"]{.bold-blue}\n  + [removing]{.green-h} unwanted characters from text, e.g. [\"New Jersey_* \"]{.bold-blue}\n  + [finding and replacing]{.green-h} characters, e.g. [\"2,150\"]{.bold-blue}\n  + [extracting]{.green-h} specific parts of strings, e.g. [\"Learning #datascience is fun!\"]{.bold-blue}\n  + [splitting]{.green-h} strings into multiple values, e.g. [\"123 Main St, Springfield, MA, 01101\"]{.bold-blue}\n\n:::\n:::\n\n\n::: middle-align-xy\n\n## Regular expressions: Regex\n\n::: eqt\n\nRegular expressions are a language for expressing patterns in strings\n\n- Regex can include special characters unlike a regular string \n- To use regex in R, you need to use the **stringr** package\n\n:::\n:::\n\n\n## `stringr` package\n\n\n::: row\n::: left\n\n<br>\n\n:::  bq\n\n  + detecting, locating, extracting and replacing elements of strings.\n  + begin with `str_` and take the string as the first argument\n:::  \n:::\n\n::: right\n\n<img src=\"images/stringr.png\" width=\"80%\" height=\"40%\"> <br>\n\n:::\n:::\n\n\n[`stringr` [cheatsheet](https://rstudio.github.io/cheatsheets/strings.pdf)]{.footer}\n\n\n## Special characters\n\n::: cle\n::: row\n::: left\n::: font80  \nThe \"escape\" backslash \\\\ is used to escape the special use of certain characters \n\n\n\n::: {.cell}\n\n```\n# \"\n# \\\n# Math\\Stats\n```\n:::\n\n\n\n:::\n:::\n\n::: right\n\n::: font80\nTo include both single and double quotes in string, escape with \\\\\n\n<br>\n  \n\n\n::: {.cell}\n\n```\n# 5'10\"\n```\n:::\n\n::: {.cell}\n\n```\n# 5'10\"\n```\n:::\n\n\n\n:::\n:::\n:::\n:::\n\n\n::: middle-align-xy\n\n##  Combining strings\n\n::: {.cle .font90 .row}\n\n::: left\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"ironwine\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"iron and wine\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: right\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aA\" \"bB\" \"cC\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n:::\n:::\n\n##  Combining strings\n\n::: cle\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"STAT 220 meets from 11:10 a.m. to 12:40 p.m. MWF in CMC 102\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## `str_length()`\n\n\n> tells you how many characters are in each entry of a character vector\n\n::: cle\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"year\"    \"marital\" \"age\"     \"race\"    \"rincome\" \"partyid\" \"relig\"  \n[8] \"denom\"   \"tvhours\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4 7 3 4 7 7 5 5 7\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## `str_count()`\n\n> counts the number of non-overlapping matches of a pattern in each entry of a character vector\n\n::: cle\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"year\"    \"marital\" \"age\"     \"race\"    \"rincome\" \"partyid\" \"relig\"  \n[8] \"denom\"   \"tvhours\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 2 2 3 2 2 2 2\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## `str_glue()`\n\n> allows one to interpolate strings and values that have been assigned to names in R\n\n::: cle\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\ntoday is 2024-08-23 17:01:16.44224.\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nHi, my name is Alex and I was born in 1992-12-24.\nHi, my name is Mia and I was born in 1994-02-14.\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n## `str_sub()`\n\n> Extract and replace substrings from a character vector\n\n::: {.cle .font80}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"cellar\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"cellar\" \"door\"  \n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"cellar door\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n::: centered-content\n## <i class=\"fa fa-pencil-square-o\" style=\"font-size:48px;color:purple\"> Group Activity 1</i> {background=\"#ffdf9e\"}\n\n::: row\n::: left\n![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)\n:::\n\n::: right\n\n<br>\n\n::: lqt\n\n- Please clone the `ca11-yourusername` repository from  [Github](https://github.com/DataScienceSpring24)\n- Please complete problem 1 in today's class activity.\n:::\n:::\n:::\n\npreserve9ce2a5541d44f703\n:::\n\n\n\n\n## More Special Characters\n\n::: eqt\n::: font80\n\n- The [|]{.yellow-h} symbol inside a regex means `\"or\"`\n- The [[abe]]{.yellow-h} means one of a,b, or e\n- Use [`\\\\n`]{.yellow-h} to match a newline character\n- Use [`\\\\s`]{.yellow-h} to match white space characters (spaces, tabs, and newlines)\n- Use [`\\\\w`]{.yellow-h} to match alphanumeric characters (letters and numbers)\n    * can also use [`[:alnum:]`]{.yellow-h} \n- Use [`\\\\d`]{.yellow-h} to represent digits (numbers)\n    * can also use [`[:digit:]`]{.yellow-h}\n\n:::\n:::\n\n[Click [here](https://www.jetbrains.com/help/objc/regular-expression-syntax-reference.html#regex-syntax-reference) for extensive lists]{.footer}\n\n\n\n\n##\n\n<center>\n<div style=\"text-align: center;\">\n  <img src=\"images/stringr_character.png\" style=\"width: 70%;\">\n</div>\n\n</center>\n\n\n[`stringr` [cheatsheet](https://rstudio.github.io/cheatsheets/strings.pdf)]{.footer}\n\n\n::: middle-align-xy\n\n## More Special Characters\n\n::: eqt\n\n- [`^`]{.yellow-h} = start of a string\n- [`$`]{.yellow-h} = end of a string\n- [`.`]{.yellow-h} = any character\n\n:::\n:::\n\n::: middle-align-xy\n\n## Quantifiers\n\n::: eqt\n\n- [`*`]{.yellow-h} = matches the preceding character any number of times\n- [`+`]{.yellow-h} = matches the preceding character once\n- [`?`]{.yellow-h} = matches the preceding character at most once (i.e. optionally)\n- [{n}]{.yellow-h} = matches the preceding character exactly n times\n\n:::\n\n\n[Try more regexes [here](https://regexr.com/)]{.footer}\n\n:::\n\n## Finding strings\n\n::: cle \n::: font80\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n     start end\n[1,]     4   6\n[2,]     5   7\n[3,]     7   9\n[4,]     6   8\n[5,]     4   6\n[6,]     6   8\n[7,]     4   6\n```\n\n\n:::\n:::\n\n\n\n\n:::\n:::\n\n## `str_extract()` \n\n> Extract just the part of the string matching the specified regex instead of the entire entry\n\n::: cle\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Moly\" \"Ali\"  \"Eli\"  \"May\" \n```\n\n\n:::\n:::\n\n\n:::\n\n<details>\n<summary class=\"answer\">Click for Hint</summary>\nExtracts the first word from each string in the given vector\n</details>\n\n\n\n## `str_split()`\n\n> splits a string into a list or matrix of pieces based on a supplied pattern\n\n::: cle\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"a\" \"3\"\n\n[[2]]\n[1] \"d\" \"4\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,] \"a\"  \"3\" \n[2,] \"d\"  \"4\" \n```\n\n\n:::\n:::\n\n\n\n:::\n\n## `str_replace()`\n\n> Replaces the first instance of the detected pattern with a specified string.\n\n::: cle\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"X_r\"    \"X_ital\" \"X_\"     \"X_e\"    \"X_come\" \"X_tyid\" \"X_ig\"   \"X_om\"  \n[9] \"X_ours\"\n```\n\n\n:::\n:::\n\n\n\n:::\n\n## **str_replace_all()** {auto-animate=\"true\"}\n\n::: scroll-box-20\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51 × 4\n   state                population total murder_rate\n   <chr>                <chr>      <chr>       <dbl>\n 1 Alabama              4,853,875  348           7.2\n 2 Alaska               737,709    59            8  \n 3 Arizona              6,817,565  309           4.5\n 4 Arkansas             2,977,853  181           6.1\n 5 California           38,993,940 1,861         4.8\n 6 Colorado             5,448,819  176           3.2\n 7 Connecticut          3,584,730  117           3.3\n 8 Delaware             944,076    63            6.7\n 9 District of Columbia 670,377    162          24.2\n10 Florida              20,244,914 1,041         5.1\n# ℹ 41 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## **str_replace_all()**{auto-animate=true}\n\n::: scroll-box-20\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51 × 4\n   state                population total murder_rate\n   <chr>                <chr>      <chr>       <dbl>\n 1 Alabama              4853875    348           7.2\n 2 Alaska               737709     59            8  \n 3 Arizona              6817565    309           4.5\n 4 Arkansas             2977853    181           6.1\n 5 California           38993940   1861          4.8\n 6 Colorado             5448819    176           3.2\n 7 Connecticut          3584730    117           3.3\n 8 Delaware             944076     63            6.7\n 9 District of Columbia 670377     162          24.2\n10 Florida              20244914   1041          5.1\n# ℹ 41 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## **str_replace_all()**{auto-animate=true}\n\n::: scroll-box-20\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51 × 4\n   state                population total murder_rate\n   <chr>                     <dbl> <dbl>       <dbl>\n 1 Alabama                 4853875   348         7.2\n 2 Alaska                   737709    59         8  \n 3 Arizona                 6817565   309         4.5\n 4 Arkansas                2977853   181         6.1\n 5 California             38993940  1861         4.8\n 6 Colorado                5448819   176         3.2\n 7 Connecticut             3584730   117         3.3\n 8 Delaware                 944076    63         6.7\n 9 District of Columbia     670377   162        24.2\n10 Florida                20244914  1041         5.1\n# ℹ 41 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n::: centered-content\n## <i class=\"fa fa-pencil-square-o\" style=\"font-size:48px;color:purple\"> Group Activity 2</i> {background=\"#ffdf9e\"}\n\n::: row\n::: left\n![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)\n:::\n\n::: right\n\n<br>\n\n::: lqt\n\n- Please do the remaining problems in the class activity.\n- Submit to Gradescope on [moodle](https://moodle.carleton.edu/course/view.php?id=43692) when done!\n:::\n:::\n:::\n\npreserveb8affc7c732af7d5\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"Day11_files/libs/countdown/countdown.css\" rel=\"stylesheet\" />\n<script src=\"Day11_files/libs/countdown/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {
      "preserve9ce2a5541d44f703": "<div class=\"countdown\" id=\"timer_ad23efed\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;left:0;padding:3px 4px;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>",
      "preserveb8affc7c732af7d5": "<div class=\"countdown\" id=\"timer_ab5e8e73\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;left:0;padding:3px 4px;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>"
    },
    "postProcess": true
  }
}