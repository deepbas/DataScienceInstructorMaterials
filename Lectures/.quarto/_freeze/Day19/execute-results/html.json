{
  "hash": "5374e2efc404e02bad8785163743e420",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Shiny Reactivity and App Deployment\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"STAT 220\"\nauthor: \"Bastola\"\nformat:\n  revealjs: \n    theme: [default, scss/main.scss]\n    slide_level: 2\n    slide-number: true\n    preview-links: auto\n    history: true\n    chalkboard: true\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\nfilters:\n  - shinylive\n  - webr\n---\n\n\n\n\n\n\n## Shiny Reactivity: A Quick Tour\n\n\n::: cle\n\n<center>\n<img src=\"images/reactivity.png\" width=\"80%\" height=\"60%\"> <br>\n<a>Shiny reactivity 101</a>\n</center>\n\n:::\n\n[[Learn more about Shiny reactivity](https://shiny.rstudio.com/articles/understanding-reactivity.html)]{.footer}\n\n\n## Shiny Reactivity: Listen and React\n\n<br>\n\n::: vvt\n\n- Think of Shiny as a live conversation between you and your app.\n- Your app listens (reacts) to what you say (input) and responds with answers (output).\n- It keeps the chat going, updating automatically as the conversation evolves.\n\n:::\n\n[[Understanding reactivity in R](https://shiny.rstudio.com/articles/understanding-reactivity.html)]{.footer}\n\n\n\n## Behind the Scenes: Reactive Expressions\n\n\n<br>\n\n::: zen\n\n\"Reactive expressions link your questions to the app's answers.\"\n\n- They're like the app's thought process, taking your input and figuring out the output.\n- They're smart: only recalculating when needed to keep everything running smoothly.\n\n:::\n\n## Real-World Magic: Reactive Use Cases\n\n\n<br>\n\n::: zen\n\n- Imagine your app fetching data just as you ask for it:\n  + Choosing a file? It reads it on-the-spot.\n  + Curious about data from a website? It grabs it for you.\n  + Need to crunch some numbers based on your choices? It does the math instantly.\n\n:::\n\n\n\n## Sharing Secrets: Reactive Values\n\n\n<br>\n\n<br>\n\n\n:::zen\n\n- Reactive values are the app's memory, holding onto data for quick recall.\n- Think of `input$` as the app's ear, always listening for your next request.\n\n:::\n\n\n\n::: {.column-screen}\n\n##\n\n\n\n```{=html}\n<iframe width=\"1980\" height=\"1320\" src=\"https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKAZwAtaJWAlAB0IAV1oACADwBaCQDNq4gCYAFKAHM47ERImlapanHUQ41HWACqqZVAMQNE1dSKkJAISic4yiSQkrH0YJAEkIVFFSITABXF0JTlplOHoWABkoViIonQg9PSSUtMZTczyCgrF4RloCcMjSSyJ6ThjcCRiAOVEYejgQonl-VoGAN3taEk5Eds78ysWlgomlOAkAXgkARgAGXY6YPk2d4QW9OIS9GCg+MosJVFdSAHkoxstlWk5SFzcYgRnC4iM7BMYDaRyeSiCAEAwkdh8RodHKkRoCCQgBKoxoAEi+Pz+7lkEkYFBSpWe7Cx5wkvB+7EYECIjBgiIiUVxLU4gISAF8znyRDw+KwAILodjiDpggYCMB8gC6QA\" title=\"Webpage example\"></iframe>\n```\n\n\n\n:::\n\n\n## `actionButton()`: The Magic Button in Shiny\n\n::: ws\n::: font60\n\n\"üñ±Ô∏è A button that lets users decide when to make things happen.\n\nHow `actionButton()` Empowers Your App\n\n- **What it does**: Adds a clickable button to your app's page.\n- **User Power**: Lets people run actions (like calculations or data display) on their command.\n- **Pair with Magic**: Works best with `eventReactive()`, waiting for the click to spring into action.\n\n:::\n:::\n\n\n::: {.column-screen}\n\n##\n\n\n\n```{=html}\n<iframe width=\"1980\" height=\"1320\" src=\"https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKAZwAtaJWAlAB0IAV1oACADwBaCQDNq4gCYAFKAHM47ERImlapanHUQ41HWACqqZVAMQNE1dSKkJAISic4yiSQkrH0YJAEkIVFFSITABXF0JTlplOHoWABkoViIonQg9PSSUtMZTczyCgrF4RloCcMjSSyJ6ThjcCRiAOVEYejgQonl-VoGAN3taEk5Eds78ysWlgomlOAkAXgkARgAGXY6YPk2duITKqAIDEg8o0hJLUVt7ODmYmztyZ1do2PnKs4LPQwKB8MoWVA-ADyUUalmUtE4pBcbhiAmECwxGJEwTGA2kcnkoggVymEHYfEaHRypEaAgkIAAvjjePwAILodjiDq4gYCMCMgC6QA\" title=\"Webpage example\"></iframe>\n```\n\n\n\n:::\n\n\n\n## Understanding `eventReactive()` in Shiny\n\n\n<br>\n\n::: mre\n\n- `eventReactive()` lets a Shiny app react only when you want.\n- Trigger updates with specific actions, like clicking a button.\n- Reduces work by updating calculations only when needed.\n\n:::\n\n\n\n\n::: {.column-screen}\n\n##\n\n\n\n```{=html}\n<iframe width=\"1980\" height=\"1320\" src=\"https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKAZwAtaJWAlAB0IAV1oACADwBaCQDNq4gCYAFKAHM47ERIkwofdRDjUdEPXrHxGtAgEkIqUaR1gi9TkLwTvAOVEYejhGCSJ5MM8QgDcoUloSLx9YpTgJAF4JAEYABhzcfT4M7IFcXUsoAniSACEXUhI3UVRlOLg60gaIbwLvAFUWtolVaiJSb1LyvVRR0gB5F2dXb2VaTlIRsYny4QhdkU4YkOk5eVEIKoSIdj4lgqJFlwEJEHLW0igAfQbPmbGTiRwaIUUhYOCVeLAm5OFwAEma73a9RIBVeFksjAgREYMGhS1hHk4uz0AF99uiHqR8at1ptSADGBRlCE6ew0ZYJLx1ux3l8fn9XAJiRIySISSIDrx+ABBdDscQFQ6MYGMARgEkAXSAA\" title=\"Webpage example\"></iframe>\n```\n\n\n\n\n:::\n\n\n\n\n## `reactiveValues()`: Your App's Memory\n\n::: ws\n::: font80\n\n\"Think of `reactiveValues()` as a way for your app to remember and update things.\"\n\n- **Memory Bank**: Stores and updates information your app needs to remember.\n- **Flexibility**: Change one piece of info without affecting the rest.\n- **Teamwork**: Shares data between different parts of your app seamlessly.\n\n\n:::\n:::\n\n\n## Observe in Shiny\n\n::: ws\n::: font80\n\n- **Reactive Context**: `observe()` automatically re-executes in a reactive context when dependencies change, crucial for side effects and UI updates.\n\n- **No Return Value**: `observe()` performs actions without returning values, differing from `reactive()` which computes and returns data.\n\n- **Use Cases**: Used for updating reactive states and UI based on input changes, without producing outputs.\n\n:::\n:::\n\n\n## Observe in Shiny\n\n::: ws\n::: font80\n\n- **Reactive Context**: `observe()` automatically re-executes in a reactive context when dependencies change, crucial for side effects and UI updates.\n\n- **No Return Value**: `observe()` performs actions without returning values, differing from `reactive()` which computes and returns data.\n\n- **Use Cases**: Used for updating reactive states and UI based on input changes, without producing outputs.\n\n:::\n:::\n\n\n\n## `observeEvent()`: The Watchful Eye in Shiny\n\n::: ws\n::: font80\n\n\"`observeEvent()` watches for specific actions, like button clicks, to do something special.\"\n\n\n- **Action Detector**: Springs into action when it detects its specified trigger (like a button press).\n- **Doer of Tasks**: Executes code to make changes or updates, without needing to return any value.\n- **Perfect Pair**: Works hand-in-hand with `actionButton()` for on-demand actions.\n\n:::\n:::\n\n\n\n::: {.column-screen}\n\n##\n\n\n\n```{=html}\n<iframe width=\"1980\" height=\"1320\" src=\"https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKAZwAtaJWAlAB0IAV1oACADwBaCQDNq4gCYAFKAHM47ERImlapanHUQ41HWADKtGKmMSAwkVFk4jIWAG5dEsfEZaAgBJCFRRUksoZQArUU5SADUoJThPXAlPAEFY+NIJelZEdIkARm9fKAIDEgAhCNISSz4CRjh4MnrSRogSz1DW9opSTwqIPSqaiC6ey2U4QY7SGZI+sAARBbal0Z9xgsZ2Mb1yAA9SAHkI8MjPAlFGNrJk1NGRYQhOdwA3d2k5eSuaq0Jp8G4ZFykG4CCQgXzEVzkRj-CRtSa0X4vURwTjsb4pbESAC8EgADB89ER6F9GL8AKK-MjsMERAAkLW2wxWEAycP2egRbkYrPxqRRgqRIoJcAkAGoJCzSKzonEEli0vsAL4UiRUmn0xmRRWs+aLLkNEi83wClxCqVi2QSCXue2EuTGlV5dW+bW+SE3Vn3R7DdUop7zRgAFTg53YfL0elQUAS2k8jgeT3y6uKeCdtslouxOt9EE1Ih4fFYWXQ7HEGX17g+IjAmoAukA\" title=\"Webpage example\"></iframe>\n```\n\n\n\n:::\n\n\n## `isolate()`: Pausing Reactivity in Shiny\n\n::: cle\n::: font80\n\n\"Use `isolate()` to freeze time in your app, preventing automatic updates.\"\n\n- **Control Freak**: Lets you hold back reactions, giving you control over when updates happen.\n- **Stealth Mode**: Use inputs quietly without alerting the rest of your app to change.\n- **Strategic Updates**: Perfect for when you need to fetch or use data on your own terms, not automatically.\n\n:::\n:::\n\n::: {.column-screen}\n\n##\n\n\n\n```{=html}\n<iframe width=\"1980\" height=\"1320\" src=\"https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAVwEsACAHgFp6AzAGzoBMAFKAOZwAFAB0I9euQAepAJIRU1UmLAz5i5aLz1tAUTJwATvQDOReFLiztASlzjJUAqVokAQstIlVp6gCMYWlJPUm8IbVxdMABlAKDSOwcJK1kAeWUlFW0iTOUAFWtEsHtHVNIM0izVYmpDIztxW3FTYwA3YyZWNjqXNwhhWk1SKNyq5Vt6EDLa+q76IzhnVw6ANSguOFNhAg5aAgBrU3oAXnoABmaUsqJ-VqMOvQ6yQeGAEj9A4NDwqOmUySzchGN67fZHeZA4ygvaHY4AanoAEYypIxlk3uiCkV5osINxjIVZMJ-pIyfQAMT0ACqpiGAnotHMHCg5GEk289FQi2epAWSz6bWCAE96CRygosvQCAALKAQISmVFk1BQUxs7QATVyZniwXI3EQkUZ73UkomyoAvldyVjSKDcnMWPz8YSiiTlZJVeqRNo4l8+f4vOKwYc4NxjVCQaGjlFtK54EqSlabfRreJLS0ZUNhQBBdDCOhRe4dIy2MCWgC6QA\" title=\"Webpage example\"></iframe>\n```\n\n\n\n:::\n\n\n::: centered-content\n\n## <i class=\"fa fa-pencil-square-o\" style=\"font-size:48px;color:purple\">¬†Group¬†Activity¬†1</i> {background=\"#ffdf9e\"}\n\n::: row\n::: left\n![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)\n:::\n\n::: right\n\n::: lqt\n::: font60\n- Please clone the `ca19-yourusername` repository from  [Github](https://github.com/DataScienceSpring24)\n- For the remainder of time, let's practice building a simple Shiny app and deploy it to [Shinyapps.io](https://www.shinyapps.io/)\n- Go to [Shinyapps.io](https://www.shinyapps.io/), create a new account, and authenticate RStudio to connect with the web server by following the provided steps.\n:::\n:::\n:::\n:::\n\n`<div class=\"countdown\" id=\"timer_f99fcdb6\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;left:0;padding:3px 4px;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">30</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>`{=html}\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"Day19_files/libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"Day19_files/libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}