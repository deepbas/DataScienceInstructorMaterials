{
  "hash": "3a9f5c4af2953b7d022289116475f85a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data wrangling with **dplyr**\"\ntitle-slide-attributes:\n  data-background-image: images/lake.jpg\n  data-background-size: contain\n  data-background-opacity: \"0.5\"\nsubtitle: \"STAT 220\"\nauthor: \"Bastola\"\nformat:\n  revealjs: \n    theme: [default, scss/main.scss]\n    slide_level: 2\n    slide-number: true\n    preview-links: auto\n    history: true\n    chalkboard: true\n    transition: slide\n    background-transition: fade    \n    touch: false\n    controls: true\n---\n\n\n\n\n\n\n## Data Wrangling \n\nThe process of cleaning and unifying messy and complex data sets for easy access and analysis\n\n::: cle\n::: font80\n- \"data janitor work\"\n- importing, cleaning data\n- changing shape of data\n- fixing errors and poorly formatted data elements\n- transforming columns and rows\n- filtering, subsetting\n:::\n\n::: footer\n[Click here for dplyr cheatsheet](https://rstudio.github.io/cheatsheets/data-transformation.pdf)\n:::\n\n:::\n\n\n## The Five Verbs\n\n<br>\n\nMost of the operations on a data table can be achieved with\n\n::: bq\n\n- [select()]{.bold-text} : extract a subset of columns\n- [filter()]{.bold-text} : extract a subset of rows\n- [mutate()]{.bold-text} : create new columns\n- [arrange()]{.bold-text} : order the rows from smallest to largest (or largest to smallest)\n- [summarize()]{.bold-text} : compute a table of summary statistics\n:::\n\n\n\n## Some Operators\n\n::: font80\n\n| Operator | Definition                |\n|----------|---------------------------|\n| `<`      | less than                 |\n| `<=`     | less than or equal to     |\n| `>`      | greater than              |\n| `>=`     | greater than or equal to  |\n| `==`     | exactly equal to          |\n| `!=`     | not equal to              |\n| `x & y`  | `x` AND `y`               |\n| `x %in% y` | test if `x` is in `y`   |\n\n\n:::\n\n\n\n## Find a subset of the columns using *select()*:\n\n[`select()`: take a subset of the columns (variables/features)]{.green-h}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n   year name          n\n  <dbl> <chr>     <int>\n1  1880 Mary       7065\n2  1880 Anna       2604\n3  1880 Emma       2003\n4  1880 Elizabeth  1939\n5  1880 Minnie     1746\n6  1880 Margaret   1578\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Using **%>%** (pipe operator)\n::: bq\n::: font70\n\n- `%>%` passes result on left into first argument of function on right\n- `Chaining` functions together lets you read `Left-to-right`, `top-to-bottom`\n:::\n:::\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n   year name          n\n  <dbl> <chr>     <int>\n1  1880 Mary       7065\n2  1880 Anna       2604\n3  1880 Emma       2003\n4  1880 Elizabeth  1939\n5  1880 Minnie     1746\n6  1880 Margaret   1578\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Find a subset of the rows using *filter()*\n\n[`filter()`: take a subset of the rows (observations)]{.green-h}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n   year sex   name      n     prop\n  <dbl> <chr> <chr> <int>    <dbl>\n1  1880 F     Bella    13 0.000133\n2  1881 F     Bella    24 0.000243\n3  1882 F     Bella    16 0.000138\n4  1883 F     Bella    17 0.000142\n5  1884 F     Bella    31 0.000225\n6  1885 F     Bella    25 0.000176\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Using both *filter()* and *select()*\n\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n    year name  sex       n\n   <dbl> <chr> <chr> <int>\n 1  1880 Bella F        13\n 2  1881 Bella F        24\n 3  1882 Bella F        16\n 4  1883 Bella F        17\n 5  1884 Bella F        31\n 6  1885 Bella F        25\n 7  1886 Bella F        22\n 8  1887 Bella F        26\n 9  1888 Bella F        31\n10  1889 Bella F        37\n```\n\n\n:::\n:::\n\n\n\n\n\n## Using both *filter()* and *select()*\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 3\n    year name      n\n   <dbl> <chr> <int>\n 1  1995 Mike    332\n 2  1996 Mike    362\n 3  1997 Mike    334\n 4  1998 Mike    289\n 5  1999 Mike    284\n 6  2000 Mike    329\n 7  2001 Mike    315\n 8  2002 Mike    342\n 9  2003 Mike    321\n10  2004 Mike    338\n11  2005 Mike    300\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## *arrange()*\n\n[Order rows from smallest to largest]{.green-h}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 3\n    year name      n\n   <dbl> <chr> <int>\n 1  1999 Mike    284\n 2  1998 Mike    289\n 3  2005 Mike    300\n 4  2001 Mike    315\n 5  2003 Mike    321\n 6  2000 Mike    329\n 7  1995 Mike    332\n 8  1997 Mike    334\n 9  2004 Mike    338\n10  2002 Mike    342\n11  1996 Mike    362\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## *arrange(desc())*\n\n[Changes ordering from largest to smallest]{.green-h}\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 3\n    year name      n\n   <dbl> <chr> <int>\n 1  1996 Mike    362\n 2  2002 Mike    342\n 3  2004 Mike    338\n 4  1997 Mike    334\n 5  1995 Mike    332\n 6  2000 Mike    329\n 7  2003 Mike    321\n 8  2001 Mike    315\n 9  2005 Mike    300\n10  1998 Mike    289\n11  1999 Mike    284\n```\n\n\n:::\n:::\n\n\n\n\n\n::: centered-content\n## <i class=\"fa fa-pencil-square-o\" style=\"font-size:48px;color:purple\"> Group Activity 1</i> {background=\"#ffdf9e\"}\n\n::: row\n::: left\n![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)\n:::\n\n::: right\n\n<br>\n\n::: lqt\n- Please clone the `ca6-yourusername` repository from  [Github](https://github.com/DataScienceSpring24)\n- Please do the problems 1 and 2 on the class activity for today\n:::\n:::\n:::\n\npreserve844b645616b0340a\n:::\n\n\n\n\n\n\n## *summarize()* or *summarise()*\n\n[If we want to compare summary statistics, we might use `summarize()`]{.green-h}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  total   max  mean     n\n  <int> <int> <dbl> <int>\n1 57411  5121  416.   138\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## Using *group_by()*\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 24 × 5\n# Groups:   year [12]\n    year sex   name      n      prop\n   <dbl> <chr> <chr> <int>     <dbl>\n 1  2006 F     Kaden   103 0.0000493\n 2  2006 M     Kaden  4741 0.00216  \n 3  2007 F     Kaden    96 0.0000454\n 4  2007 M     Kaden  4520 0.00204  \n 5  2008 F     Kaden    71 0.0000341\n 6  2008 M     Kaden  4500 0.00207  \n 7  2009 F     Kaden    78 0.0000386\n 8  2009 M     Kaden  4061 0.00192  \n 9  2010 F     Kaden    40 0.0000204\n10  2010 M     Kaden  3590 0.00175  \n# ℹ 14 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Using *group_by()* along with *summarize()*\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 2\n    year total\n   <dbl> <int>\n 1  2006  4844\n 2  2007  4616\n 3  2008  4571\n 4  2009  4139\n 5  2010  3630\n 6  2011  3323\n 7  2012  2972\n 8  2013  2662\n 9  2014  2486\n10  2015  2357\n11  2016  2039\n12  2017  1851\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## *mutate()*\n\n[`mutate()` lets us create new variables based on manipulations of the old variables]{.green-h}\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n# Groups:   year [1]\n   year sex   name          n   prop percent\n  <dbl> <chr> <chr>     <int>  <dbl>   <dbl>\n1  1880 F     Mary       7065 0.0724    7.24\n2  1880 F     Anna       2604 0.0267    2.67\n3  1880 F     Emma       2003 0.0205    2.05\n4  1880 F     Elizabeth  1939 0.0199    1.99\n5  1880 F     Minnie     1746 0.0179    1.79\n6  1880 F     Margaret   1578 0.0162    1.62\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## Using `mutate()` with `lag()`\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 138 × 6\n    year sex   name      n     prop change_in_n\n   <dbl> <chr> <chr> <int>    <dbl>       <int>\n 1  1880 M     Aaron   102 0.000861         102\n 2  1881 M     Aaron    94 0.000868          -8\n 3  1882 M     Aaron    85 0.000697          -9\n 4  1883 M     Aaron   105 0.000934          20\n 5  1884 M     Aaron    97 0.000790          -8\n 6  1885 M     Aaron    88 0.000759          -9\n 7  1886 M     Aaron    86 0.000722          -2\n 8  1887 M     Aaron    78 0.000714          -8\n 9  1888 M     Aaron    90 0.000693          12\n10  1889 M     Aaron    85 0.000714          -5\n# ℹ 128 more rows\n```\n\n\n:::\n:::\n\n\n\n\n::: middle-align-xy\n\n\n## *min_rank()* : A go to ranking function (ties share the lowest rank)\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 2 1\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n\n\n## Slicing and selecting data\n\n::: bql\n\nThe slice_ operators let you slice (subset) rows:\n\n- [slice()]{.bold-red} : index rows by their (integer) locations\n- [slice_head(n=5)]{.bold-red} : view the first 5 rows\n- [slice_tail(n=5)]{.bold-red} : view the last 5 rows\n- [slice_sample(n=5)]{.bold-red} : view 5 random rows\n- [slice_min(column, n=5)]{.bold-red} : view the 5 smallest values of a column\n- [slice_max(column, n=5)]{.bold-red} : view the 5 largest values of a column\n:::\n\n\n\n\n::: middle-align-xy\n\n## *slice()*\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  country     continent  year lifeExp      pop gdpPercap\n  <fct>       <fct>     <int>   <dbl>    <int>     <dbl>\n1 Afghanistan Asia       1952    28.8  8425333      779.\n2 Afghanistan Asia       1957    30.3  9240934      821.\n3 Afghanistan Asia       1962    32.0 10267083      853.\n4 Afghanistan Asia       1967    34.0 11537966      836.\n5 Afghanistan Asia       1972    36.1 13079460      740.\n```\n\n\n:::\n:::\n\n\n\n:::\n\n\n::: middle-align-xy\n\n## *slice_max()*\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  country continent  year lifeExp     pop gdpPercap\n  <fct>   <fct>     <int>   <dbl>   <int>     <dbl>\n1 Kuwait  Asia       1957    58.0  212846   113523.\n2 Kuwait  Asia       1972    67.7  841934   109348.\n3 Kuwait  Asia       1952    55.6  160000   108382.\n4 Kuwait  Asia       1962    60.5  358266    95458.\n5 Kuwait  Asia       1967    64.6  575003    80895.\n6 Kuwait  Asia       1977    69.3 1140357    59265.\n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n\n## Using `pull()`\n\n[`pull()` is used to extract a single column from a data frame as a vector.]{.green-h}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"John\"     \"Mary\"     \"Robert\"   \"James\"    \"Linda\"    \"Michael\" \n [7] \"David\"    \"Jacob\"    \"Isabella\" \"Sophia\"   \"Emma\"    \n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## *summarize()* vs. *mutate()*\n\n[`summarize()` : summarize collapses all variable values down to one number (by group)]{.green-h}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  continent avg_life_expectancy\n  <fct>                   <dbl>\n1 Africa                   48.9\n2 Americas                 64.7\n3 Asia                     60.1\n4 Europe                   71.9\n5 Oceania                  74.3\n```\n\n\n:::\n:::\n\n\n\n\n\n## *summarize()* vs. *mutate()*\n\n[`mutate()` : transforms all variable values but preserves the variable length (by group)]{.green-h}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,704 × 7\n# Groups:   continent [5]\n   country     continent  year lifeExp      pop gdpPercap AverageLifeExp\n   <fct>       <fct>     <int>   <dbl>    <int>     <dbl>          <dbl>\n 1 Afghanistan Asia       1952    28.8  8425333      779.           60.1\n 2 Afghanistan Asia       1957    30.3  9240934      821.           60.1\n 3 Afghanistan Asia       1962    32.0 10267083      853.           60.1\n 4 Afghanistan Asia       1967    34.0 11537966      836.           60.1\n 5 Afghanistan Asia       1972    36.1 13079460      740.           60.1\n 6 Afghanistan Asia       1977    38.4 14880372      786.           60.1\n 7 Afghanistan Asia       1982    39.9 12881816      978.           60.1\n 8 Afghanistan Asia       1987    40.8 13867957      852.           60.1\n 9 Afghanistan Asia       1992    41.7 16317921      649.           60.1\n10 Afghanistan Asia       1997    41.8 22227415      635.           60.1\n# ℹ 1,694 more rows\n```\n\n\n:::\n:::\n\n\n\n\n## *group_by(var1, var2)*\n\n[Any further computations would apply to both grouping variables]{.green-h}\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n# Groups:   continent [5]\n  continent  year AverageLifeExp\n  <fct>     <int>          <dbl>\n1 Africa     2007           54.8\n2 Americas   2007           73.6\n3 Asia       2007           70.7\n4 Europe     2007           77.6\n5 Oceania    2007           80.7\n```\n\n\n:::\n:::\n\n\n\n\n## *ungroup()*\n\n[Any further mutations called on it would not use the grouping for aggregate statistics]{.greeh-h}\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  continent  year avg_life_expectancy\n  <fct>     <int>               <dbl>\n1 Oceania    2007                80.7\n```\n\n\n:::\n:::\n\n\n\n\n\n\n::: centered-content\n\n## <i class=\"fa fa-pencil-square-o\" style=\"font-size:48px;color:purple\"> Group Activity 2</i> {background=\"#ffdf9e\"}\n\n::: row\n::: left\n![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)\n:::\n\n::: right\n\n\n\n::: lqt\n\n- Continue working on the class activity \n- Submit to Gradescope on [moodle](https://moodle.carleton.edu/course/view.php?id=43692) when done!\n\n:::\n:::\n:::\n\npreserve904c7cdfd7fd23e8\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"Day6_files/libs/countdown/countdown.css\" rel=\"stylesheet\" />\n<script src=\"Day6_files/libs/countdown/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {
      "preserve844b645616b0340a": "<div class=\"countdown\" id=\"timer_af1203e2\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;left:0;padding:3px 4px;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>",
      "preserve904c7cdfd7fd23e8": "<div class=\"countdown\" id=\"timer_eed19130\" data-update-every=\"1\" tabindex=\"0\" style=\"top:0;left:0;padding:3px 4px;font-size:1em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>"
    },
    "postProcess": true
  }
}