---
title: "Iteration and functionals"
title-slide-attributes:
  data-background-image: images/lake.jpg
  data-background-size: contain
  data-background-opacity: "0.5"
subtitle: "STAT 220"
author: "Bastola"
format:
  revealjs: 
    theme: [default, scss/main.scss]
    slide_level: 2
    slide-number: true
    preview-links: auto
    history: true
    chalkboard: true
    transition: slide
    background-transition: fade    
    touch: false
    controls: true
---


```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
options(htmltools.preserve.raw = FALSE)
options(ggrepel.max.overlaps = Inf)


library(tidyverse)
library(countdown)
library(mosaic)
library(ggthemes)

library(forcats)
library(patchwork)
library(DT)
library(knitr)
library(grid)
library(gridExtra)
library(ggrepel)
library(lubridate)
library(polite)
library(rvest)
library(stringr)
library(gapminder)
select <- dplyr::select

# Set ggplot theme
# theme_set(theme_stata(base_size = 10))

yt <- 0

# read.csv("https://raw.githubusercontent.com/deepbas/statdatasets/main/agstrat.csv")
```



## Why repeat ourselves?

::: {.row .bq}
::: left

```{r}
tinydata <- tribble(
  ~case, ~x, ~y, ~z, 
  "a", 5, 3, -2,
  "b", 7, 1, -5,
  "c", 9, 12, -3
)
```

```{r}
tinydata
```


:::

::: right

Find the mean of each columns

```{r}
mean(tinydata$x)
```

```{r}
mean(tinydata$y)
```

```{r}
mean(tinydata$z)
```

:::
:::

[It would be nice to iterate this process so that the same function/operation can be ran multiple times]{.note}




## For loops

::: note
What is a For loop? 

- A for loop is a way to iterate through a series of items stored as a data object in R.
:::

<br>

::: scroll-box-12

```{r}
items <- c("grapes", "bananas", "chocolate", "bread")
for (i in items) {
  print(i)
}
```

:::


## `for` loop components

::: bq
the `for()` function is used to specify

  - what object we're drawing from and
  - what object we are writing to
:::

::: scroll-box-20
```
for(i  in  items)
     ^        ^
     |        |
     |        |___ object we are drawing from
     |
     |
obj. we write each item to

```
:::


## `for` loop components

::: bq

The `brackets {}`

  - Inside the brackets we house the code that is going to happen each iteration
:::

<br>

::: scroll-box-12

```
for( i  in  items  ){
  |~~~~~~~~~~~~~~~~|   
  |~~~~~~~~~~~~~~~~|
  |~~~~~~~~~~~~~~~~| code we need perform on each iteration.
  |~~~~~~~~~~~~~~~~|
  |~~~~~~~~~~~~~~~~|
  }

```

:::





## `for` loops `tinydata`

::: scroll-box-12

```{r}
tinydata
```

- Let’s iterate calculation of column means:

```{r}
my_means <- rep(NA, 3)   # initialize an empty vector
for (i in 1:3) {  # three columns to get the mean for
  my_means[i] <- mean(tinydata[[i+1]])  # mean of col. i+1 
}
my_means
```

:::



## Function for conditional evaluation

::: cle 
::: font90

if x is numeric then standardize, else just return x


```{r}
standardize <- function(x, ...){   # ... placeholder for optional args
  if (is.numeric(x)){              # condition
    (x - mean(x, ...))/sd(x, ...)  # if TRUE, standardize
  } else{                          # else (FALSE)
    x                              # return x unchanged
  }
}

standardize(c(2,4,6,8, 10))
standardize(c(2,4,6,8, "10"))
standardize(c(2,4,6,8, NA), na.rm = TRUE)
```

:::
:::

## Standardizing tinydata

::: scroll-box-12

```{r}
# allocate storage in a new data frame
scaled_tinydata <- tinydata %>% mutate(x = NA, y = NA,  z = NA)
for (i in seq_along(tinydata)){ 
    scaled_tinydata[, i] <- standardize(tinydata[[i]])
}
scaled_tinydata
```

:::


::: centered-content

## <i class="fa fa-pencil-square-o" style="font-size:48px;color:purple"> Group Activity `r (yt <- yt + 1)`</i> {background="#ffdf9e"}

::: row
::: left
![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)
:::

::: right

<br>

::: lqt

- Please clone the `ca15-yourusername` repository from  [Github](https://github.com/DataScienceSpring24)
- Please do the problem 1 in the class activity for today
:::
:::
:::

`r countdown(minutes = 10, seconds = 00, top = 0 , left = 0, color_background = "inherit", padding = "3px 4px", font_size = "1em")`
:::


## Functionals

::: fsp

Functional function will apply the same operation (function) to each element of a vector, matrix, data frame or list.

::: row
::: left
<img src="images/purrr.png" width=300>
:::

::: right

  - base-R: `apply` family of commands
  - `purrr` package: `map` family of commands
  
:::
:::

:::

## `apply` family of commands

::: bq
R has a family of commands that apply a function to different parts of a vector, matrix or data frame


<blockquote>
<p style="color: #502090"; font-size: 18px;> lapply(X, FUN): applies FUN to each element in the vector/list X </p> 
<p style="color: #502090; font-size: 20px;"> Example: lapply(tinydata, FUN = mean) </p>
</blockquote>



<blockquote>
<p style="color: #502090"; font-size: 18px;> sapply(X, FUN): works like lapply, but returns a vector</p> 
<p style="color: #502090; font-size: 20px;"> Example: sapply(tinydata, FUN = mean) </p>
</blockquote>

:::


## `purrr` package

::: cle

powerful package for iteration with the same functionality as apply commands, but more readable 


<img src="images/map.png" width=700 class="center">

- `map(.x, .f)` maps the function `.f` to elements in the vector/list `.x`

:::

## `lapply` with `tinydata`
::: mre
::: font80
::: row
::: left

<br>

```{r}
lapply(tinydata, FUN = mean)
```

:::

::: right
::: {.ws .font70}
- a 3x4 data frame is summarized in a list of length 4.
- R sees `tinydata` as a list whose elements are column vectors (variables)
- the FUN is applied to each list element 
- a list is returned
- length is the number of variables in the data frame
:::
:::
:::
:::
:::

## `purrr::map`

::: prm

In `purrr`, the `map` function is equivalent to `lapply`

```{r}
library(purrr)
map(tinydata, .f = mean)
```

:::



## `purrr::map_dbl`

::: mre
`map_dbl` is equivalent to `sapply`


```{r}
map_dbl(tinydata, .f = mean)
```

:::

::: ws

```{r}
sapply(tinydata, FUN = mean)
```

:::


## `purrr::map_df`

::: cle

`map_df` returns a data frame instead of a vector

```{r}
map_df(tinydata, .f = mean)
```

- No equivalency in base-R `apply`!

:::



## Functionals: single function that mutates

::: mre

`standardize` function gives us a list of standardized values

::: row
::: left

```{r}
tinydata
```

:::

::: right

```{r}
lapply(tinydata, FUN = standardize)
```

:::
:::

- a 3x4 data frame is mutated to a list of 4 vectors of length 3 each

:::


## `purrr::map_df`

::: mre

In `purrr`, the `map_df` is equal to `lapply` + `bind_cols`:

::: row
::: left


```{r}
tinydata
```

:::


::: right

```{r}
map_df(tinydata, .f = standardize)
```

:::
:::

- a 3x4 data frame is mutated to [standardized] 3x4 data frame

:::

## applying multiple functions

::: prm

- Let’s get the 0.1 and 0.9 quantile for variables in `tinydata`

```{r}
quantile(tinydata$x, probs = c(.1, .9))
quantile(tinydata$y, probs = c(.1, .9))
quantile(tinydata$z, probs = c(.1, .9))
```

-  the function output is a vector of length 2 (same lengths as probs)

:::


## `map_dfr`: Getting Quantiles

::: prm

```{r}
tinydata %>% 
  select_if(is.numeric) %>% 
  map_dfr(
    .f = quantile, 
    probs = c(.1, .9), 
    .id = "variable") 
```

Optionally use `.id` to record the variable names from `tinydata`:

:::



## `map_dfc`: Getting Quantiles

::: prm

```{r}
tinydata %>% 
  select_if(is.numeric) %>% 
  map_dfc(
    .f = quantile, 
    probs = c(.1, .9))
```

:::

::: centered-content
## <i class="fa fa-pencil-square-o" style="font-size:48px;color:purple"> Group Activity `r (yt <- yt + 1)`</i> {background="#ffdf9e"}

::: row
::: left
![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)
:::

::: right

<br>

::: lqt

- Please do the remaining problems in the class activity.
- Submit to Gradescope on [moodle](https://moodle.carleton.edu/course/view.php?id=43692) when done!
:::
:::
:::

`r countdown(minutes = 10, seconds = 00, top = 0 , left = 0, color_background = "inherit", padding = "3px 4px", font_size = "1em")`
:::


<!--


::: full-slide-html

##

```{=html}
<iframe width="1080" height="1000" src="https://shinylive.io/r/editor/#code=NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKAZwAtaJWAlAB0IIgMQACACJwAZnzgSAqgEkJsoowlpUE0tyikJAE2YB3Ttom9OpIgHNmMCQFo3LkQFdaEgDwv1am9jAAUoezh2EREJCUkAQXQ9WlJqRXcPCFjSFLSwiDhqKLAACULqIgkAZV5+AEIhMAFcaKy46tpjOHoWCWooViJPIzMU7gk+VGHtCGMJIdIpoy75CBTaEksMmIlOTu6WABkBhajRNtjJKv2erVQoAup1TQmIJa33Hdi9rtv8wrOX1i7RUb2GiGqdC6Wg0Wn0iggnhg9DgWiIsgk9D4HzcQO+UNRoKW7EmwxUcwAvBJGliIJxGi0LsDmSzgf0UU8qY0AHJIlFojG0ziIBl41nimB8CRUgCMjPFCuBMCgAA9pRIAKwABnlioVADcoEFFFSAMxa4TnZnNVrMyQAWSgUvuj2eWmMtE4qH6rD49nmw3erk+TOVfH+RVtLMkAHlA+CJCVPXZHLBg7imbFvURSHHFsN2AsluT1Y0PbYQhVSI1LUDLbFLbWIJIZKtFJxUfrUX0HLQCBJGHAAI7eQdzOwmcxWGwppzpzIdxhdrT+dSeCAEHIkElg0i4AP50gCCQgKOSJO2Bxz9F6biKGPUOYAMSd+lknieAHE4KxF9JDFA847JIoz6AOw6eHAthwHMiLIt2N5CsBEgACo2BIcAqqgg6cHsJC3oYEgRAUzDkJYgEzleaaehIZjMOgMGvFYBBGtQyEToOsyopWOZ6JUfAeix5AEaQIptGIyEyhgEgqEYNGNIOUCbrQXaNDM453oOsLttwQyPpiihQMMRDKjkLHUNQrDIcCg4uJhcAEMMjFmHeWSkqQlg7ksAAkQrHgQBgQBEyEAEzSbJlhFtMpCsKgig0YB2bVm0UWkN55akDxRirpx0JZewp5WsCarAqusivtw77UN5Zivn6QJCn4AQdkO7CShA7Aqs0EjKiqnXdWkQX6BgCzqu5vnYhIADUEgyk2zIzp1+5MHAUAANaWFSQr7sQnLUmAYgAOwavE8RSAAQgymKaNCpZgC5KRwKKmbMiq7J3QA6nVQXJPAfESAUKpGKinioFuWQ7j12LCHgYpKk6WRcqUyZUc4N61esP05PA9JNFGsQAL5NgTrSSAAwopwk1HwrDaEk2x0rUrCJKg7DeOq3j7ouy7qtzqKWmABMALpAA" title="Webpage example"></iframe>
```


:::

-->


