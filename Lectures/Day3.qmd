---
title: "Data Objects in R"
title-slide-attributes:
  data-background-image: images/lake.jpg
  data-background-size: contain
  data-background-opacity: "0.5"
subtitle: "STAT 220"
author: "Bastola"
format:
  revealjs: 
    theme: [default, scss/main.scss]
    slide_level: 2
    slide-number: true
    preview-links: auto
    history: true
    transition: slide
    background-transition: fade    
    touch: false
    controls: true
---

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
options(htmltools.preserve.raw = FALSE)
options(ggrepel.max.overlaps = Inf)

# load necessary packages
library(tidyverse)
library(dplyr)
library(countdown)
library(ggthemes)
library(knitr)
select <- dplyr::select

# Set ggplot theme
theme_set(theme_tufte(base_size = 10))

yt <- 0

# read.csv("https://raw.githubusercontent.com/deepbas/statdatasets/main/agstrat.csv")
# https://github.com/intro-to-data-science-21/labs/blob/main/session-7-visualization/7-visualization.Rmd
```

## Object Oriented Programming in R

<br>

::: bql
-   R uses object-oriented programming (OOP) principles
-   Functions in R are designed to work with specific object classes and types
-   Example: `plot()` function behaves differently based on the input object
:::

## `plot()` Function Examples

::: bq
Scatterplot with `plot()`:

```{r, eval=FALSE}
plot(y ~ x, data = mydata)  # If x and y are numeric, creates a scatterplot
```
:::

<br>

::: bq
Diagnostic plots with `plot()`:

```{r, eval=FALSE}
my_lm <- lm(y ~ x, data = mydata)  # Create a linear model
plot(my_lm)  # Produces diagnostic plots for the linear model
```
:::

<br>

The `plot()` function adapts its behavior based on the input object's class and type

## Data structures and types in R

<br>

::: bq
-   R objects are based on vectors
-   Two functions to examine objects:
    -   `typeof()`: Returns the storage mode (data type) of an object
    -   `class()`: Provides further description of an object
-   NULL: Represents an empty object (vector of length 0)
:::

## Examples of Data Types and Functions

::: columns
::: {.column width="50%"}
::: eqt
Numeric and integer data types:

```{r}
x <- c(8, 2, 1, 3)
typeof(x)  # "double" (numeric)

x_int <- c(8L, 2L, 1L, 3L)
typeof(x_int)  # "integer"
```
:::
:::

::: {.column width="50%"}
::: eqt
Logical data type and class:

```{r}
x_is_one <- x == 1
typeof(x_is_one)  # "logical"

object_class <- class(x_is_one)
object_class  # "numeric"
```
:::
:::
:::

## Atomic Vectors and lists

::: columns
::: {.column width="50%"}
<img src="images/atomic_vectors.png" width="110%" height="110%"/> <br>
:::

::: {.column width="50%"}
::: bqt
R uses two types of vectors to store info

-   **atomic vectors**: all entries have the same data type
-   **lists**: entries can contain other objects that can differ in data type
:::
:::
:::

## Examples of Vector Types

::: bq
Atomic vector (numeric):

```{r}
atomic_vector <- c(1, 2, 3, 4)
class(atomic_vector)  # "numeric"
```
:::

<br>

::: bq
List with multiple data types:

```{r}
my_list <- list(name = "John", age = 30, salary = 50000)
class(my_list)  # "list"
```
:::

## Atomic Vectors: Matrices

::: green-h
You can add **attributes**, such as **dimension**, to vectors. A **matrix** is a 2-dimensional vector containing entries of the same type
:::

::: columns
::: {.column width="50%"}
::: font60
**Creating a matrix with dimensions:**
:::

```{r}
my_matrix <- matrix(1:9, nrow = 3, ncol = 3)
class(my_matrix)  # "matrix"
my_matrix
typeof(my_matrix)
```
:::

::: {.column width="50%"}
::: font60
**Adding dimensions to a vector:**
:::

```{r}
my_vector <- c(1, 2, 3, 4, 5, 6)
dim(my_vector) <- c(2, 3)
my_vector
class(my_vector)
typeof(my_vector)
```
:::
:::

## Creating Matrices Using Vector Binding

::: green-h
Bind vectors of the same length to create columns or rows. Use `cbind()` for column binding and `rbind()` for row binding
:::

::: columns
::: {.column width="50%"}
::: font60
Column binding with `cbind()`:
:::

```{r}
x <- c(1, 2, 3, 4)
x_col <- cbind(x = x, y = 2 * x)
x_col
```
:::

::: {.column width="50%"}
::: font60
Row binding with `rbind()`:
:::

```{r}
x_row <- rbind(x1 = x, x2 = x * 2)
x_row
```
:::
:::

## Implicit and Explicit Coercion in R

::: columns
::: {.column width="50%"}
::: bq
::: font80
Implicit Coercion

-   R defaults to the most complex data type if more than one type is given

```{r}
y <- c(1, 2, "a", NULL, TRUE)
typeof(y)
class(y)
y
```
:::
:::
:::

::: {.column width="50%"}
::: bq
::: font80
Explicit coercion

-   Intentionally force a different data type from the "default" type

```{r}
y <- as.character(c(1, 2, "a", NULL, TRUE))
typeof(y)
class(y)
y
```
:::
:::
:::
:::

## Logical Vectors coercion

::: bq
Logical values coerced into 0 for `FALSE` and 1 for `TRUE` when applying math functions

```{r}
x <- c(8, 2, 1, 3)
x >= 5  # which entries >= 5?
sum(x >= 5)  # how many >= 5?
```

Mean of a Logical Vector

```{r}
mean(x >= 5) 
```
:::

## Examples: Coercion of Logical Values

::: bq
Sum of Logical Values

```{r}
grades <- c(80, 60, 95, 70, 85)
passing_grades <- grades >= 65
sum(passing_grades)  # count of passing grades
```
:::

<br>

::: bq
Mean of Logical Values

```{r}
rainfall <- c(2, 3, 5, 1, 9, 10)
rainy_days <- rainfall > 5
mean(rainy_days)  # proportion of rainy days
```
:::

## Data types: factors

Factors are a class of data that are stored as **integers**

::: columns
::: {.column width="50%"}
::: bq
```{r}
x_fct <- as.factor(c("yes", 
                     "no", 
                     "no"))
class(x_fct)
typeof(x_fct)
levels(x_fct)
```
:::
:::

::: {.column width="50%"}
::: bql
::: font60
The attribute `levels` is a character vector of possible values

-   Values are stored as the integers (1=first `level`, 2=second `level`, etc.)
-   Levels are ordered alphabetically/numerically (unless specified otherwise)
:::
:::
:::
:::



## Subsetting: Atomic Vector and Matrices


::: bq
::: font70


-   subset with `[]` by referencing index value (from 1 to vector length):

```{r}
x
x[c(4, 2)]  # get 4th and 2nd entries
x[-c(4, 2)]  # omit 4th and 2nd entries
```



-   subset with a logical vector

```{r}
# get 1st and 3rd entries
x[c(TRUE, FALSE, TRUE, FALSE)]
```

:::
:::


## Subsetting: Matrices

::: eqt
Access entries using subsetting `[row,column]`

```{r}
x_col
```

```{r}
x_col[, 1] # first column
```

```{r}
x_col[1:2, 1] # first 2 rows of first column
```
:::

## Subsetting: Atomic Vector and Matrices

::: font90
::: columns
::: {.column width="50%"}
::: bq
```{r}
x_df <- data.frame(x = x, 
                   double_x = x*2)
x_df
```

```{r}
x_df[, 1]  # first column, all rows
```
:::
:::

::: {.column width="50%"}
::: bq
or access columns with `$`

```{r}
x_df$x  # get variable x column
```

```{r}
# first column no longer a df
class(x_df[, 1])  
```
:::
:::
:::
:::


::: middle-align-xy

## Tibbles

::: bq

-   are a new modern data frame
-   never changes the input data types
-   can have columns that are lists
-   can have non-standard variable names
-   can start with a number or contain spaces
:::
:::

## Subsetting data frames

::: bq
-   Can also use column names to subset:

```{r}
library(babynames)
# get 2 rows of Name and Sex
babynames[1:2, c("name", "sex")] 
```
:::


## Lists: Flexible Data Containers 


::: lqt

List is a vector with entries that can be different object types

```{r}
my_list <- list(myVec = x, 
                myDf = x_df, 
                myString = c("hi", "bye"))
my_list
```
:::

## Accessing List Elements

::: lqt
Like a data frame, use the \$ to access named objects stored in the list

```{r}
my_list$myDf
```

```{r}
class(my_list$myDf)
```
:::

## Subsetting Lists with Single Brackets

::: bq
-   One `[]` operator gives you the object at the given location but preserves the list type
-   `my_list[2]` returns a list of length one with entry `myDf`

```{r}
my_list[2]
```

```{r}
str(my_list[2])
```
:::

## Subsetting Lists with Double Brackets

::: bq
-   The double `[[]]` operator gives you the object stored at that location (equivalent to using \$)
-   `my_list[[2]]` or `my_list[["myDf"]]` return the data frame `myDf`

```{r}
my_list[[2]]
```
:::


::: centered-content
## <i class="fa fa-pencil-square-o" style="font-size:48px;color:purple"> Group Activity `r (yt <- yt + 1)`</i> {background="#ffdf9e"}

::: row
::: left
![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)
:::

::: right
::: lqt
- Please clone the `ca3-yourusername` repository from  [Github](https://github.com/DataScienceSpring24)
- Please do the problems on the class activity for today
- Submit to Gradescope on [moodle](https://moodle.carleton.edu/course/view.php?id=43692) when done!
:::
:::
:::

`r countdown(minutes = 20, seconds = 00, top = 0 , left = 0, color_background = "inherit", padding = "3px 4px", font_size = "1em")`
:::
