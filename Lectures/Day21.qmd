---
title: "Intro to Classification"
title-slide-attributes:
  data-background-image: images/lake.jpg
  data-background-size: contain
  data-background-opacity: "0.5"
subtitle: "STAT 220"
author: "Bastola"
format:
  revealjs: 
    theme: [default, scss/main.scss]
    slide_level: 2
    slide-number: true
    preview-links: auto
    history: true
    chalkboard: true
    transition: slide
    background-transition: fade    
    touch: false
    controls: true
filters:
  - shinylive
  - webr
---


```{r setup, include=FALSE}
# load necessary packages
library(tidyr)
library(dplyr)
library(ggplot2)
library(countdown)
library(ggthemes)
library(tidyverse)
library(stringr)
library(htmlwidgets)
library(lubridate)
library(palmerpenguins)
library(fontawesome)
library(class)
library(patchwork)
library(tidymodels)
library(mlbench)    
library(janitor)
library(parsnip)
library(kknn)
library(paletteer)
library(corrr)
library(scico)


select <- dplyr::select

# Set ggplot theme
# theme_set(theme_stata(base_size = 10))

yt <- 0


fire <- read_csv("https://raw.githubusercontent.com/deepbas/statdatasets/main/Algeriafires.csv")
fire <- fire %>% clean_names() %>% na.omit() %>% mutate_at(c(10,13), as.numeric) %>% mutate(date = lubridate::make_datetime(year = year, month = month, day = day)) %>% select(-c(1,2,3)) %>% relocate(date, .before = temperature)

fire_foo <- fire %>%
  select(temperature, ffmc, classes) %>%
  bind_rows(., tibble(temperature = 37, ffmc = 83, classes = "unknown"))

distances <- as.matrix(dist(fire_foo[,-3], method = "euclidian"))

fire_foo <- fire_foo %>% 
  mutate(dist = distances[244,]) %>%
  filter(dist > 0)

x_std <- (37 - mean(fire$temperature, na.rm = TRUE)) / sd(fire$temperature, na.rm = TRUE)
y_std <- (83 - mean(fire$ffmc, na.rm = TRUE)) / sd(fire$ffmc, na.rm = TRUE)

forest_image <- "images/forest_fire.jpg"

```



## Classification


::: cle

Predicting what category a (future) observation falls into

- Astronomy: Whether an exoplanet is habitable (or not)
- Filtering: Identify spam emails
- Medicine: Use lab results to determine who has a disease (or not)
- Product preference: make product recommendations based on past purchases

:::




##

```{css, echo=FALSE}
.container-forest {
  background-image: url('images/forest_fire.jpg');
  background-size: cover;
  background-position: center;
  height: 70vh; 
  width: 100%;
  position: relative; 
  display: flex;
  align-items: center; 
  justify-content: center; 
}
```

<div class="container-forest">
  <div class="yellow-h">
    Fire can be deadly, destroying homes, wildlife habitat and timber, and polluting the air with harmful emissions.
  </div>
</div>




## Predicting the next forest fire ..

::: vvt

**Dataset**

- contains a culmination of forest fire observations 
- based on two regions of Algeria: the Bejaia region and the Sidi Bel-Abbes region. 
- from June 2012 to September 2012

:::

[Click [here](https://archive.ics.uci.edu/dataset/547/algerian+forest+fires+dataset) to learn more about the dataset]{.footer}



## Data Description 

::: font60

Variable | Description
-------- | -------------
`Date` | (DD-MM-YYYY) Day, month, year 
`Temp` | Noon temperature in Celsius degrees: 22 to 42
`RH` | Relative Humidity in percentage: 21 to 90
`Ws` | Wind speed in km/h: 6 to 29
`Rain` | Daily total rain in mm: 0 to 16.8
`Fine Fuel Moisture Code (FFMC) index` | 28.6 to 92.5
`Duff Moisture Code (DMC) index` | 1.1 to 65.9
`Drought Code (DC) index` | 7 to 220.4
`Initial Spread Index (ISI) index` | 0 to 18.5
`Buildup Index (BUI) index` | 1.1 to 68
`Fire Weather Index (FWI) index` | 0 to 31.1
`Classes` | Two classes, namely fire and not fire

:::



## Glimpse of the data 

::: scroll-box-20
::: font60

```{r}
head(fire, 10) %>% knitr::kable()
```

:::
:::

## Scatterplot

```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
ggplot(data = fire, aes(x = temperature, y = ffmc , fill = classes)) +
  geom_point(color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```



## Classifying a new observation?

```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
ggplot(data = fire, aes(x = temperature, y = ffmc , fill = classes)) +
  geom_point(aes(x = 37, y = 83), color = "green", pch = 4) +
  geom_point(color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```


##

::: cle
::: font80

::: row
::: left

![](images/distance-metrics.png)

:::


::: right


Euclidean distance: the straight line distance between two points on the x-y plane with coordinates  
$(x_a, y_a)$ and  $(x_b,y_b)$

$${\rm Distance} = \sqrt{\left(x_a - x_b \right)^2 + \left( y_a - y_b \right)^2}$$


Manhattan distance: the "taxi-cab" distance between two points on the x-y plane

$${\rm Distance} = \left|x_a - x_b \right| + \left| y_a - y_b \right|$$

:::
:::

:::
:::

## Looking at Euclidean distance

```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
ggplot(data = fire, aes(x = temperature, y = ffmc , fill = classes)) +
  geom_point(aes(x = 37, y = 83), color = "green", pch = 4) +
  geom_segment(aes(xend=37, yend=83), alpha = 0.2) +
  geom_point(color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```




## 1-Nearest Neighbor (NN)

```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
ggplot(data = fire, aes(x = temperature, y = ffmc , fill = classes)) +
  geom_point(aes(x = 37, y = 83), color = "green", pch = 4) +
  geom_segment(data = top_n(fire_foo, n = -1, dist), aes(xend=37, yend=83), alpha = 0.8) +
  geom_point(color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```



## 10-NN

```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
ggplot(data = fire, aes(x = temperature, y = ffmc , fill = classes)) +
  geom_point(aes(x = 37, y = 83), color = "green", pch = 4) +
  geom_segment(data = top_n(fire_foo, n = -10, dist), aes(xend=37, yend=83), alpha = 0.8) +
  geom_point(color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```



## 10-NN


```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
ggplot(data = fire, aes(x = temperature, y = ffmc , fill = classes)) +
  geom_point(aes(x = 37, y = 83), color = "green", pch = 4) +
  geom_segment(data = top_n(fire_foo, n = -10, dist), aes(xend=37, yend=83), alpha = 0.8) +
  geom_point(color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```



<div style="position: absolute; top: 70%; left: 10%;">
<span style="content: '\2192'; font-size: 40px; color: #FF00FF; text-align: center; white-space: pre-line;">
  <p>Wait, something is not quite right..</p>
</span>
</div>




## Need to standardize data

::: zen
::: font70

::: row
::: left

```{r}
standardize <- function(x, na.rm = FALSE) {
  (x - mean(x, na.rm = na.rm)) / 
    sd(x, na.rm = na.rm)
}
```

:::

::: right

```{r}
fire %>% select(ffmc, temperature,) %>%  
  map_df(.f = ~sd(.))
```

:::
:::

- Predictors with larger variation will have larger influence on which cases are “nearest” neighbors
- Methods relying on distance can be sensitive (i.e. not invariant) to the scale of the predictors
- Standardizing only shifts and rescales the variable, it doesn't change the shape of the distribution

:::
:::


##

![](images/horst_dplyr_across.png)



## Standardized data

::: scroll-box-20
::: font60

```{r}
fire1 <- fire %>% mutate(across(where(is.numeric), standardize))
fire1 %>% head() %>% knitr::kable()
```

:::
:::

## 1-NN again


```{r, echo=FALSE}
fire_bar <- fire1 %>%
  select(temperature, ffmc, classes) %>%
  bind_rows(., tibble(temperature = x_std, ffmc = y_std, classes = "unknown"))

distances <- as.matrix(dist(fire_bar[,-3], method = "euclidian"))

fire_bar <- fire_bar %>% 
  mutate(dist = distances[244,]) %>%
  filter(dist > 0)
```


```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
ggplot(data = fire1, aes(x = temperature, y = ffmc , fill = classes)) +
  geom_point(aes(x = x_std, y = y_std), color = "green", pch = 4) +
  geom_segment(data = top_n(fire_bar, n = -1, dist), aes(xend=x_std, yend=y_std), alpha = 0.8) +
  geom_point(color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```



## 10-NN again

```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
ggplot(data = fire1, aes(x = temperature, y = ffmc , fill = classes)) +
  geom_point(aes(x = x_std, y = y_std), color = "green", pch = 4) +
  geom_segment(data = top_n(fire_bar, n = -10, dist), aes(xend=x_std, yend=y_std), alpha = 0.8) +
  geom_point(color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```



## 50-NN again

```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
ggplot(data = fire1, aes(x = temperature, y = ffmc , fill = classes)) +
  geom_point(aes(x = x_std, y = y_std), color = "green", pch = 4) +
  geom_segment(data = top_n(fire_bar, n = -50, dist), aes(xend=x_std, yend=y_std), alpha = 0.8) +
  geom_point(color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```




## Visualizing the decision boundary

::: ws

- We can map out the region in feature-space where the classifier would predict 'fire', and the kinds where it would predict 'not fire'

- There is some boundary between the two, where points on one side of
the boundary will be classified 'fire' and points on the other side will be
classified 'not fire'

- This boundary is called **decision boundary**

:::



## Visualizing the decision boundary

```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
grid_pts <- expand.grid(temperature = seq(min(fire1$temperature), max(fire1$temperature), length.out = 50), 
                        ffmc = seq(min(fire1$ffmc), max(fire1$ffmc), length.out = 50))

ggplot(data = fire1) +
  geom_point(data = grid_pts, aes(x = temperature, y = ffmc), alpha = 0.05) +
  geom_point(aes(x = temperature, y = ffmc, fill = classes), color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```



## 1-NN decision boundary

```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
# Illustrating the decision boundary
knn_preds <- knn(train = fire1[, c("temperature", "ffmc")], test = grid_pts, cl = fire1[["classes"]], k = 1)

knn_df <- data.frame(grid_pts, classes = knn_preds)

ggplot(data = fire1) +
  geom_point(data = knn_df, aes(x = temperature, y = ffmc, color = classes), alpha = 0.3) +
  geom_point(aes(x = temperature, y = ffmc, fill = classes), color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_color_brewer(palette = "Spectral") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```



## 25-NN decision boundary

```{r echo=FALSE, fig.width=7, fig.height=4.5, fig.align='center', out.width = "80%"}
# Illustrating the decision boundary
knn_preds <- knn(train = fire1[, c("temperature", "ffmc")], test = grid_pts, cl = fire1[["classes"]], k = 25)

knn_df <- data.frame(grid_pts, classes = knn_preds)

ggplot(data = fire1) +
  geom_point(data = knn_df, aes(x = temperature, y = ffmc, color = classes), alpha = 0.3) +
  geom_point(aes(x = temperature, y = ffmc, fill = classes), color = "black", pch = 21) +
  labs(x = "Temperature", y = "Fine Fuel Moisture Code (FFMC)") +
  scale_color_brewer(palette = "Spectral") +
  scale_fill_brewer(palette = "Spectral") +
  theme_tufte()
```




::: middle-align-xy

##



::: row
::: left

![](images/tidymodels.png)

:::

::: right
a collection of packages for modeling and machine learning using tidyverse principles
:::
:::

:::


## 1. Load data and convert to correct data types

::: cle

```{r}
fire_raw <- read_csv("https://raw.githubusercontent.com/deepbas/statdatasets/main/Algeriafires.csv") %>% 
  janitor::clean_names() %>% tidyr::drop_na() %>% 
  mutate(classes = factor(classes)) %>%
  mutate_at(c(10,13), as.numeric) %>%
  select(temperature, ffmc, classes)
head(fire_raw)
```

:::

##

![](images/recipe.jpg)


::: middle-align-xy

## 2. Create a recipe for data preprocessing

::: cle

```{r}
fire_recipe <- recipe(classes ~ ., data = fire_raw) %>%
 step_scale(all_predictors()) %>%
 step_center(all_predictors()) %>%
 prep()
```

:::
:::

## 3. Apply the recipe to the data set

::: cle

```{r}
fire_scaled <- bake(fire_recipe, fire_raw)
```



```{r, echo=FALSE}
fire_scaled
```

:::


::: middle-align-xy

## 4. Create a model specification

::: cle

```{r}
knn_spec <- nearest_neighbor(mode = "classification",
                             engine = "kknn",
                             weight_func = "rectangular",
                             neighbors = 5) 
```

:::

:::

::: middle-align-xy

## 5. Fit the model on the preprocessed data

::: cle

```{r}
knn_fit <- knn_spec %>%
 fit(classes ~ ., data = fire_scaled)
```

:::
:::


## 6. Classify

::: cle

Suppose we get two new observations, use predict to classify the observations


```{r}
# Data frame/tibble of new observations
new_observations <- tibble(temperature = c(1, 2), ffmc = c(-1, 1))
```


```{r}
# Making classifications (i.e. predictions)
predict(knn_fit, new_data = new_observations)
```

:::


## Further Practice: Pima Indians Diabetes 

::: bql

- Owned by the National Institute of Diabetes and Digestive and Kidney Diseases
- A data frame with 768 observations on 9 variables.
- We have the lab results of 158 patients, including whether they have CKD
- Response variable: `diabetes` =	`pos`, `neg`
- Predictor variables: _pregnant, glucose, pressure, triceps, insulin, mass,  pedigree, age_ 

:::


## Variables

::: font80

Variable | Description
-------- | -------------
`pregnant`| Number of times pregnant
`glucose` | Plasma glucose concentration (glucose tolerance test)
`pressure` | Diastolic blood pressure (mm Hg)
`triceps` | Triceps skinfold thickness (mm)
`insulin` | 2-Hour serum insulin (mu U/ml)
`mass` | Body mass index (weight in kg/(height in m)\²)
`pedigree` | Diabetes pedigree function
`age` | Age (years)
`diabetes` | diabetes case (pos/neg)

:::

::: centered-content

## <i class="fa fa-pencil-square-o" style="font-size:48px;color:purple"> Group Activity `r (yt <- yt + 1)`</i> {background="#ffdf9e"}

::: row
::: left
![](https://media.giphy.com/media/RKApDdwsQ6jkwd6RNn/giphy.gif)
:::

::: right

<br>

::: lqt

- Please clone the `ca21-yourusername` repository from  [Github](https://github.com/DataScienceSpring24)
- Please do the problems in the class activity for today

:::
:::
:::

`r countdown(minutes = 10, seconds = 00, top = 0 , left = 0, color_background = "inherit", padding = "3px 4px", font_size = "1em")`
:::



