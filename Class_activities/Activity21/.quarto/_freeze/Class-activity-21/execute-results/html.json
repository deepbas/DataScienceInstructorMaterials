{
  "hash": "1794b74211e448b91f40f8773468f9fb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class Activity 21\"\nauthor: \"Your name here\"\ndate: \" May 12 2024\"\nformat:\n  html:\n    df_print: paged\n    editor: visual\nserver: shiny\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n\n\n\n\n\n\n\n\n## Group Activity 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the data\ndata(PimaIndiansDiabetes2)\ndb <- PimaIndiansDiabetes2\n\n# correlation plot of the variables\ndb %>%\n  select(-diabetes) %>%  # only numerical variables\n  correlate() %>%\n  stretch() %>%\n  ggplot(aes(x, y, fill = r)) +\n  geom_tile() +\n  geom_text(aes(label = as.character(fashion(r)))) +\n  scale_fill_paletteer_c(\"scico::roma\", limits = c(-1, 1), direction = -1)\n```\n\n::: {.cell-output-display}\n![](Class-activity-21_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n\n\n\na. Create a scatter plot using ggplot2 to visualize the classification of diabetes status based on glucose and insulin levels, color-coding negative cases in blue and positive cases in red.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(db_raw, aes(x = glucose, y = insulin, color = diabetes)) +\n  # fill in #\n  scale_color_manual(values = c(\"neg\" = \"blue\", \"pos\" = \"red\"))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'db_raw' not found\n```\n\n\n:::\n:::\n\n\n\n\nb. Using the provided standardization function, apply it to both the glucose and insulin columns of your dataset to create new standardized columns, then plot these standardized values to analyze diabetes status.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstandardize <- function(x, na.rm = FALSE) {\n  (x - mean(x, na.rm = na.rm)) / \n    sd(x, na.rm = na.rm)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndb_std <- db_raw %>%\n  mutate(# fill in #)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:0: unexpected end of input\n1: db_std <- db_raw %>%\n2:   mutate(# fill in #)\n  ^\n```\n\n\n:::\n:::\n\n\n\n\nc. Let's  perform all the steps involved in classifying whether a patient with certain glucose and insulin would have diabetes or not.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 1 Prepare raw data\ndb_raw <- db %>% drop_na() %>%  select(glucose, insulin, diabetes)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2 Create a recipe for data pre-processing\ndb_recipe <- \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:0: unexpected end of input\n1: # 2 Create a recipe for data pre-processing\n2: db_recipe <- \n  ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 3 Apply the recipe to the data set\ndb_scaled <-  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:0: unexpected end of input\n1: # 3 Apply the recipe to the data set\n2: db_scaled <-  \n  ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 4 Create a model specification\nknn_spec <- \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:0: unexpected end of input\n1: # 4 Create a model specification\n2: knn_spec <- \n  ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 5 Fit the model on the pre-processed data\nknn_fit <- \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:0: unexpected end of input\n1: # 5 Fit the model on the pre-processed data\n2: knn_fit <- \n  ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# 6 Classify\n# These are standardized value!!\nnew_observations <- tibble(glucose = c(1, 2), insulin = c(-1, 1))\n```\n:::\n\n\n\n\nd. We already know the labels of the patients in the dataset. How well does the model predict their diabetes status? We will see more of this in the coming lectures.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscaled_observations <- \n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:0: unexpected end of input\n1: scaled_observations <- \n2:   \n  ^\n```\n\n\n:::\n:::\n\n\n\nWhat is the accuracy percentage?\n\n*Answer:*\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\ne. Repeat part d. with a different model that consists of all the available features fitted with different number of neighbors. See if the accuracy percentage change in this new setting.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_spec <- \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:0: unexpected end of input\n1: knn_spec <- \n   ^\n```\n\n\n:::\n:::\n\npreservef3e0b13cca6f8648\npreserve3ce98d2e61783f7a\n\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"dependencies\">\n{\"type\":\"list\",\"attributes\":{},\"value\":[]}\n</script>\n<!--/html_preserve-->\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"execution_dependencies\">\n{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\",\"version\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"data.frame\"]},\"row.names\":{\"type\":\"integer\",\"attributes\":{},\"value\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"backports\",\"base\",\"broom\",\"class\",\"cli\",\"codetools\",\"colorspace\",\"compiler\",\"corrr\",\"data.table\",\"datasets\",\"dials\",\"DiceDesign\",\"digest\",\"dplyr\",\"evaluate\",\"fansi\",\"farver\",\"fastmap\",\"forcats\",\"foreach\",\"furrr\",\"future\",\"future.apply\",\"generics\",\"ggplot2\",\"ggthemes\",\"globals\",\"glue\",\"gower\",\"GPfit\",\"graphics\",\"grDevices\",\"grid\",\"gtable\",\"hardhat\",\"hms\",\"htmltools\",\"htmlwidgets\",\"httpuv\",\"igraph\",\"infer\",\"ipred\",\"iterators\",\"janitor\",\"jsonlite\",\"kknn\",\"knitr\",\"labeling\",\"later\",\"lattice\",\"lava\",\"lhs\",\"lifecycle\",\"listenv\",\"lubridate\",\"magrittr\",\"MASS\",\"Matrix\",\"methods\",\"mime\",\"mlbench\",\"modeldata\",\"munsell\",\"nnet\",\"paletteer\",\"parallel\",\"parallelly\",\"parsnip\",\"pillar\",\"pkgconfig\",\"prismatic\",\"prodlim\",\"promises\",\"purrr\",\"R6\",\"Rcpp\",\"readr\",\"recipes\",\"rematch2\",\"rlang\",\"rmarkdown\",\"rpart\",\"rsample\",\"rstudioapi\",\"scales\",\"scico\",\"shiny\",\"snakecase\",\"splines\",\"stats\",\"stringi\",\"stringr\",\"survival\",\"tibble\",\"tidymodels\",\"tidyr\",\"tidyselect\",\"tidyverse\",\"timechange\",\"timeDate\",\"tools\",\"tune\",\"tzdb\",\"utf8\",\"utils\",\"vctrs\",\"withr\",\"workflows\",\"workflowsets\",\"xfun\",\"xtable\",\"yaml\",\"yardstick\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"1.4.1\",\"4.4.0\",\"1.0.5\",\"7.3-22\",\"3.6.2\",\"0.2-20\",\"2.1-0\",\"4.4.0\",\"0.4.4\",\"1.15.4\",\"4.4.0\",\"1.2.1\",\"1.10\",\"0.6.35\",\"1.1.4\",\"0.23\",\"1.0.6\",\"2.1.1\",\"1.1.1\",\"1.0.0\",\"1.5.2\",\"0.3.1\",\"1.33.2\",\"1.11.2\",\"0.1.3\",\"3.5.1\",\"5.1.0\",\"0.16.3\",\"1.7.0\",\"1.0.1\",\"1.0-8\",\"4.4.0\",\"4.4.0\",\"4.4.0\",\"0.3.5\",\"1.3.1\",\"1.1.3\",\"0.5.8.1\",\"1.6.4\",\"1.6.15\",\"2.0.3\",\"1.0.7\",\"0.9-14\",\"1.0.14\",\"2.2.0\",\"1.8.8\",\"1.3.1\",\"1.46\",\"0.4.3\",\"1.3.2\",\"0.22-6\",\"1.8.0\",\"1.1.6\",\"1.0.4\",\"0.9.1\",\"1.9.3\",\"2.0.3\",\"7.3-60.2\",\"1.7-0\",\"4.4.0\",\"0.12\",\"2.1-5\",\"1.3.0\",\"0.5.1\",\"7.3-19\",\"1.6.0\",\"4.4.0\",\"1.37.1\",\"1.2.1\",\"1.9.0\",\"2.0.3\",\"1.1.2\",\"2023.08.28\",\"1.3.0\",\"1.0.2\",\"2.5.1\",\"1.0.12\",\"2.1.5\",\"1.0.10\",\"2.1.2\",\"1.1.3\",\"2.26\",\"4.1.23\",\"1.2.1\",\"0.16.0\",\"1.3.0\",\"1.5.0\",\"1.8.1.1\",\"0.11.1\",\"4.4.0\",\"4.4.0\",\"1.8.4\",\"1.5.1\",\"3.6-4\",\"3.2.1\",\"1.2.0\",\"1.3.1\",\"1.2.1\",\"2.0.0\",\"0.3.0\",\"4032.109\",\"4.4.0\",\"1.2.1\",\"0.4.0\",\"1.2.4\",\"4.4.0\",\"0.6.5\",\"3.0.0\",\"1.1.4\",\"1.1.0\",\"0.43\",\"1.8-4\",\"2.3.8\",\"1.3.1\"]}]}]}\n</script>\n<!--/html_preserve-->",
    "supporting": [
      "Class-activity-21_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {
      "preserve3ce98d2e61783f7a": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-extras\">\nojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {\n  quos <- rlang::enquos(...)\n  vars <- rlang::list2(...)\n  nm <- names(vars)\n  if (is.null(nm)) {\n    nm <- rep_len(\"\", length(vars))\n  }\n  mapply(function(q, nm, val) {\n    # Infer name, if possible\n    if (nm == \"\") {\n      tryCatch({\n        nm <- rlang::as_name(q)\n      }, error = function(e) {\n        code <- paste(collapse = \"\\n\", deparse(rlang::f_rhs(q)))\n        stop(\"ojs_define() could not create a name for the argument: \", code)\n      })\n    }\n    .session$output[[nm]] <- val\n    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)\n    .session$sendCustomMessage(\"ojs-export\", list(name = nm))\n    NULL\n  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)\n  invisible()\n}\n</script>\n",
      "preservef3e0b13cca6f8648": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-start\">\n# load the necessary libraries\nlibrary(tidyverse) \nlibrary(tidymodels)\nlibrary(mlbench)     \nlibrary(janitor)\nlibrary(parsnip)\nlibrary(kknn)\nlibrary(paletteer)\nlibrary(corrr)\nlibrary(forcats)\nlibrary(ggthemes)\n</script>\n"
    },
    "postProcess": true
  }
}