{
  "hash": "ecae33d8cc12cdfa5207bf10b020cace",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class Activity 20\"\nauthor: \"Your name here\"\ndate: \" May 10 2024\"\nformat:\n  html:\n    df_print: paged\n    editor: visual\nserver: shiny\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n\n\n\n## Group Activity 1\n\nExplore COVID-19 vaccination rates across the United States with the following R script, which scrapes data, processes it, and creates an interactive, state-level leaflet map for clear visualization.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(tigris)\nlibrary(rvest)\nlibrary(janitor)\nlibrary(dplyr)\nlibrary(leaflet)\nlibrary(readr)\nlibrary(stringr)\n\n# Set options to get data in sf format\noptions(tigris_class = \"sf\")\noptions(tigris_use_cache = TRUE)\n\n# Load U.S. state shapes\nstates_sf <- states()\n\nstates_sf <- states_sf %>% \n  mutate(state = tolower(NAME))\n\n# Reading and preprocessing the COVID data\ncovid_final <- read_html(\"https://usafacts.org/visualizations/covid-vaccine-tracker-states/state/minnesota\") %>%\n  html_elements(css = \"table\") %>%\n  html_table() %>%\n  .[[1]] %>%\n  janitor::clean_names() %>%\n  mutate(across(c(2, 3, 4), parse_number)) %>%\n  mutate(state = tolower(state))\n\ndiff <- c(setdiff(states_sf$state, covid_final$state), \"alaska\", \"hawaii\")\nstates_sf <- states_sf %>%\n  filter(!state %in% diff)\n\n# Merge COVID data with sf data\nstates_sf <- left_join(states_sf, covid_final, by = (\"state\" = \"state\"))\nstates_sf <- st_transform(states_sf, crs = \"+proj=longlat +datum=WGS84\") \n\n# Create the leaflet map\nleaflet(states_sf) %>%\n  addProviderTiles(providers$Stamen.TonerLite) %>%\n  addPolygons(fillColor = ~colorNumeric(\"viridis\", percent_fully_vaccinated)(percent_fully_vaccinated),\n              color = \"#000000\", weight = 1, opacity = 1,\n              fillOpacity = 0.7, smoothFactor = 0.5,\n              highlightOptions = highlightOptions(weight = 3, color = \"#666666\", bringToFront = TRUE),\n              label = ~paste(str_to_title(state), \":\", percent_fully_vaccinated, \"% fully vaccinated\")) %>%\n  addLegend(pal = colorNumeric(\"viridis\", range(states_sf$percent_fully_vaccinated, na.rm = TRUE)),\n            values = ~percent_fully_vaccinated, opacity = 1,\n            title = \"Vaccination Rate (%)\", position = \"bottomright\")\n```\n:::\n\n\n\n\nNow, let's create an interactive Leaflet map leveraging the tools in the Shiny ecosystem. This Shiny app allows users to dynamically choose variables related to COVID-19 vaccination rates across U.S. states, as well as the color scheme for visualizing these data. Users can interact with the dashboard to select their preferred data variable and color palette via user-friendly dropdown menus. The map updates in real-time based on user selections, providing a versatile tool for detailed and customized data visualization.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shiny)\nlibrary(tigris)\nlibrary(shinydashboard)\nlibrary(shinyWidgets)\nlibrary(leaflet)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(rvest)\nlibrary(janitor)\nlibrary(RColorBrewer)\nlibrary(readr)\nlibrary(stringr)\nlibrary(ggplot2)\nlibrary(shinybusy)\n\n\noptions(tigris_class = \"sf\")\noptions(tigris_use_cache = TRUE)\n\n# Load U.S. state shapes\nstates_sf <- states() %>%\n  mutate(state = tolower(NAME)) %>%\n  left_join(read_html(\"https://usafacts.org/visualizations/covid-vaccine-tracker-states/state/minnesota\") %>%\n            html_elements(css = \"table\") %>% \n            html_table() %>% \n            .[[1]] %>%\n            janitor::clean_names() %>%\n            mutate(across(2:4, parse_number), state = tolower(state)), by = \"state\") %>%\n  filter(!state %in% c(\"alaska\", \"hawaii\", \"united states virgin islands\", \"commonwealth of the northern mariana islands\", \"guam\", \"american samoa\", \"puerto rico\")) %>%\n  st_transform(crs = \"+proj=longlat +datum=WGS84\")\n\nhead(states_sf)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- dashboardPage(\n    dashboardHeader(title = \"COVID-19 Vaccination Dashboard\"),\n    dashboardSidebar(\n        sidebarMenu(\n            menuItem(\"Map \", tabName = \"map\", icon = icon(\"globe\")),\n            menuItem(\"Description\", tabName = \"description\", icon = icon(\"info-circle\"))\n        )\n    ),\n    dashboardBody(\n        tabItems(\n            tabItem(tabName = \"map\",\n                    fluidRow(\n                        box(width = 12, leafletOutput(\"map\")),\n                        pickerInput(\"variable\", \"Choose a variable:\", choices = names(states_sf)[16:18],\n                                    options = list(`style` = \"btn-info\"), multiple = FALSE, selected = \"percent_fully_vaccinated\"),\n                        pickerInput(\"colorScheme\", \"Choose Color Scheme:\", \n                                    choices = c(\"Spectral\", \"RdYlBu\", \"RdYlGn\", \"PiYG\", \"PRGn\"),\n                                    options = list(`style` = \"btn-success\"), multiple = FALSE, selected = \"Spectral\"),\n                        actionButton(\"updateMap\", \"Update Map\")\n                    )),\n            tabItem(tabName = \"description\",\n                    h2(\"COVID-19 Vaccination Dashboard\"),\n                    p(\"This dashboard visualizes the COVID-19 vaccination rates across the U.S. states.\"),\n                    p(\"Select different variables and color schemes to adjust the map visualization.\"),\n                    p(\"View detailed data and histograms of the selected variables directly on the map.\"))\n        ),\n        add_busy_gif(\n    src = \"https://jeroen.github.io/images/banana.gif\",\n    height = 70, width = 70\n    )\n  )\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output, session) {\n  \n  values <- reactiveValues()\n\n  # Load and prepare the initial data\n  values$data <- states_sf\n  values$variable <- \"percent_fully_vaccinated\"  \n  values$colorScheme <- \"Spectral\"  \n\n  # Function to update data based on current inputs\n  updateData <- function() {\n    values$data$selected_var <- values$data[[values$variable]]\n    values$data\n  }\n\n  # Render the map initially and upon changes\n  output$map <- renderLeaflet({\n    # This will fetch the data and apply transformations based on the selected variable\n    data <- updateData()\n    \n    # Create a color palette using the currently selected color scheme\n    pal <- colorNumeric(brewer.pal(8, values$colorScheme), data$selected_var)\n\n    # Build and render the map\n    leaflet(data) %>%\n      addProviderTiles(providers$Stamen.TonerLite) %>%\n      addPolygons(\n        fillColor = ~pal(selected_var),\n        color = \"#000000\", weight = 1, opacity = 1,\n        fillOpacity = 0.7, smoothFactor = 0.5,\n        highlightOptions = highlightOptions(weight = 3, color = \"#666666\", bringToFront = TRUE),\n        popup = ~paste(str_to_title(NAME), \":\", round(selected_var, 2), \"%\")\n      ) %>%\n      addLegend(\n        pal = pal, \n        values = ~selected_var, \n        opacity = 1,\n        title = values$variable,\n        position = \"bottomright\"\n      )\n  })\n\n  # Observe the Update Map button\n  observeEvent(input$updateMap, {\n    # Update the variables and color scheme based on the input from the UI when the button is pressed\n    values$variable <- input$variable\n    values$colorScheme <- input$colorScheme\n\n    # Force re-render of the map\n    output$map <- renderLeaflet({\n      # Re-fetch the updated data\n      data <- updateData()\n      \n      # Recreate the color palette with possibly a new color scheme\n      pal <- colorNumeric(brewer.pal(8, values$colorScheme), data$selected_var)\n\n      # Rebuild and render the updated map\n      leaflet(data) %>%\n        addProviderTiles(providers$Stamen.TonerLite) %>%\n        addPolygons(\n          fillColor = ~pal(selected_var),\n          color = \"#000000\", weight = 1, opacity = 1,\n          fillOpacity = 0.7, smoothFactor = 0.5,\n          highlightOptions = highlightOptions(weight = 3, color = \"#666666\", bringToFront = TRUE),\n          popup = ~paste(str_to_title(NAME), \":\", round(selected_var, 2), \"%\")\n        ) %>%\n        addLegend(\n          pal = pal, \n          values = ~selected_var, \n          opacity = 1,\n          title = values$variable,\n          position = \"bottomright\"\n        )\n    })\n  })\n}\n\n\nshinyApp(ui = ui, server = server)\n```\n:::\n\npreserve5d8715fe47127b2c\n\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"dependencies\">\n{\"type\":\"list\",\"attributes\":{},\"value\":[]}\n</script>\n<!--/html_preserve-->\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"execution_dependencies\">\n{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\",\"version\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"data.frame\"]},\"row.names\":{\"type\":\"integer\",\"attributes\":{},\"value\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"base\",\"cli\",\"compiler\",\"datasets\",\"digest\",\"evaluate\",\"fastmap\",\"graphics\",\"grDevices\",\"htmltools\",\"htmlwidgets\",\"httpuv\",\"jsonlite\",\"knitr\",\"later\",\"lifecycle\",\"magrittr\",\"methods\",\"mime\",\"promises\",\"R6\",\"Rcpp\",\"rlang\",\"rmarkdown\",\"rstudioapi\",\"shiny\",\"stats\",\"tools\",\"utils\",\"xfun\",\"xtable\",\"yaml\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"4.4.0\",\"3.6.2\",\"4.4.0\",\"4.4.0\",\"0.6.35\",\"0.23\",\"1.1.1\",\"4.4.0\",\"4.4.0\",\"0.5.8.1\",\"1.6.4\",\"1.6.15\",\"1.8.8\",\"1.46\",\"1.3.2\",\"1.0.4\",\"2.0.3\",\"4.4.0\",\"0.12\",\"1.3.0\",\"2.5.1\",\"1.0.12\",\"1.1.3\",\"2.26\",\"0.16.0\",\"1.8.1.1\",\"4.4.0\",\"4.4.0\",\"4.4.0\",\"0.43\",\"1.8-4\",\"2.3.8\"]}]}]}\n</script>\n<!--/html_preserve-->",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {
      "preserve5d8715fe47127b2c": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-extras\">\nojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {\n  quos <- rlang::enquos(...)\n  vars <- rlang::list2(...)\n  nm <- names(vars)\n  if (is.null(nm)) {\n    nm <- rep_len(\"\", length(vars))\n  }\n  mapply(function(q, nm, val) {\n    # Infer name, if possible\n    if (nm == \"\") {\n      tryCatch({\n        nm <- rlang::as_name(q)\n      }, error = function(e) {\n        code <- paste(collapse = \"\\n\", deparse(rlang::f_rhs(q)))\n        stop(\"ojs_define() could not create a name for the argument: \", code)\n      })\n    }\n    .session$output[[nm]] <- val\n    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)\n    .session$sendCustomMessage(\"ojs-export\", list(name = nm))\n    NULL\n  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)\n  invisible()\n}\n</script>\n"
    },
    "postProcess": true
  }
}