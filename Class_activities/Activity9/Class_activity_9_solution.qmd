---
title: "Class Activity 10"
author: "Your name here"
date: "`r format(Sys.Date(), ' %B %d %Y')`"
output:
  pdf_document: default
  word_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, 
                      size = "small", 
                      collapse = TRUE, 
                      comment = NA, 
                      warning = FALSE, 
                      message = FALSE,
                      error = TRUE)

# load the necessary libraries
library(tidyverse)
library(janitor)
library(stringr)
library(tidyr)
library(lubridate)
library(readr)
```


\vspace*{1in}

## Problem 1

a) Use `read_csv()` to import the `desserts` data set from https://raw.githubusercontent.com/deepbas/statdatasets/main/desserts.csv. Use `glimpse` to see if the data import is alright.

```{r}
url <- "https://raw.githubusercontent.com/deepbas/statdatasets/main/desserts.csv"
desserts <- read_csv(url)
glimpse(desserts)
```

Does everything look good? Import the dataset with correct data types, if needed. Fix the problems, if any.

```{r}
# your r-code

desserts <- read_csv(url, 
                     col_types = list(
                       technical = col_number(),
                       uk_airdate = col_date()
                     ))

problems(desserts)

desserts <- read_csv(
  "https://raw.githubusercontent.com/deepbas/statdatasets/main/desserts.csv",
    col_types = list(
    technical = col_number(), 
    uk_airdate = col_date(format = "%d %B %Y")
  ) 
)

problems(desserts)

desserts <- read_csv(
  "https://raw.githubusercontent.com/deepbas/statdatasets/main/desserts.csv",
  col_types = list(
    technical = col_number(), 
    uk_airdate = col_date(format = "%d %B %Y")
  ),
  na = c("", "NA", "N/A")
)

problems(desserts)
glimpse(desserts)

```


## Problem 2

Use the appropriate `read_<type>()` function to import the following data sets:

- `https://deepbas.io/data/simple-1.dat`

- `https://deepbas.io/data/mild-1.csv`

- `https://deepbas.io/data/tricky-1.csv`

- `https://deepbas.io/data/tricky-2.csv`


If you hit any errors/problems, be sure to explore them and identify the issue, even if you can't "fix" it.


a)

```{r}
simple1 <- readr::read_csv("https://deepbas.io/data/simple-1.dat")
problems(simple1)
```

b)

```{r}
mild1 <- readr::read_delim("https://deepbas.io/data/mild-1.csv", delim = "|")
problems(mild1)
```

c)

```{r}
tricky1 <-  read_csv("https://deepbas.io/data/tricky-1.csv")
problems(tricky1)
```

The issue is that we have missing values that aren't specifically included in the rows 4 and 7 of the **original** file (so rows 3 and 6 once we load the data). We can fix this with post processing.

```{r}

tricky1[3,] <- c(tricky1[3,1:2], NA, tricky1[3,3:4])
tricky1[6,] <- c(tricky1[6,1:2], NA, tricky1[6,3:4])
tricky1
```


d)

```{r}
tricky2 <- read_csv("https://deepbas.io/data/tricky-2.csv")
problems(tricky2)
```

This looks like a missing value problem again! Let's look at the rows with missing values:

```{r}
# parse in sections

tricky2_part1 <- read_csv("https://deepbas.io/data/tricky-2.csv",
                          n_max = 7)

# fix the city column

tricky2_part1 <-  tricky2_part1 %>% separate(city, c("city", "state"), sep = ",")


# remove the last row

tricky2_part1 <-  tricky2_part1 %>% select(-c(7))
cnames <- colnames(tricky2_part1)
```



```{r}
tricky2_part2 <- read_csv("https://deepbas.io/data/tricky-2.csv",
                          skip = 8,
                          col_names = cnames)
```


```{r}
tricky2_part2 <- read_csv(
  "https://deepbas.io/data/tricky-2.csv",
  skip = 8, 
  col_names = c("iata", "airport", "city", "state",  "latitude", "longitude")
)
```


```{r}
# join the two parts
data_combined <- full_join(tricky2_part1, tricky2_part2)
```


## Acknowledgemant

Parts of the activities are adapted from similar activity written by Adam Loy.



