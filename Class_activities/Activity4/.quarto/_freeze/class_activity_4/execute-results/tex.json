{
  "hash": "505cc85347bad36796af4af4fd0e37cb",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class Activity 4\"\nauthor: \"Your name here\"\ndate: \" March 31 2024\"\nformat:\n  pdf: default\n  html:\n    df_print: paged\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n\n\n\n\n\n\n\n## Your turn 1\n\nThis worksheet will guide you through creating various plots using the `ggplot2` package in R. We will be using the `datasaurus_dozen` dataset from the `datasauRus` package for demonstration purposes. The dataset contains 13 different datasets, and we'll use them to create a variety of plots.\n\n### Scatterplot\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\na. Run the following code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dino_data, mapping = aes(x = x, y = y)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](class_activity_4_files/figure-pdf/unnamed-chunk-2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\nb. You _must_ remember to put the aesthetic mappings in the `aes()` function! What happens if you forget? \n\n*Answer:* \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add a layer and see what happens\nggplot(data = dino_data , x = __ , y = __)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:32: unexpected input\n1: # Add a layer and see what happens\n2: ggplot(data = dino_data , x = __\n                                  ^\n```\n\n\n:::\n:::\n\n\n\n\n\nc. The aesthetic mappings can be specified in the geom layer if you prefer, instead of the main `ggplot()` call. Give it a try:\n\n*Answer:* \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rebuild the scatterplot with your aesthetic mapping in the geom layer\nggplot(data = dino_data) +\n   geom_point(____) \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:16: unexpected input\n2: ggplot(data = dino_data) +\n3:    geom_point(__\n                  ^\n```\n\n\n:::\n:::\n\n\n\n\n\n### Bar Plot\n\nIn this problem, we'll explore creating a bar plot using the `datasaurus`_dozen dataset.\n\na. Create a new data frame called `dataset_counts` containing the count of observations in each dataset.\n\n*Answer:* \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n_______ <- datasaurus_dozen %>%\n  group_by(dataset) %>%\n  summarise(count = n()) # number of rows in each dataset\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:1:2: unexpected input\n1: __\n     ^\n```\n\n\n:::\n:::\n\n\n\n\nb. Create a bar plot showing the number of observations in each dataset.\n\n*Answer:* \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = _______, aes(x = dataset, y = count)) +\n  geom_***(stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:1:16: unexpected input\n1: ggplot(data = __\n                   ^\n```\n\n\n:::\n:::\n\n\n\n\n\n\nc. Generate a bar plot to visualize the median of the `x` variable across different datasets, with error bars denoting the interquartile range (IQR) for each dataset.\n\n*Answer:* \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate median and interquartile range for each dataset\ndataset_summary <- datasaurus_dozen %>%\n  group_by(dataset) %>%\n  summarise(median_x = median(x), iqr_x = IQR(x))\n\n# Create a bar plot with error bars representing the IQR\nggplot(dataset_summary, aes(x = , y = )) +\n  geom_****() +\n  geom_****() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(title = \"Median of x by Dataset with IQR Error Bars\", x = \"Dataset\", y = \"Median of x\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:8:10: unexpected '^'\n7: ggplot(dataset_summary, aes(x = , y = )) +\n8:   geom_****\n            ^\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Histogram\n\na. Create a histogram of the `x` variable for the `dino` dataset.\n\n*Answer:* \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dino_data, aes(x = x)) +\n  geom_****(binwidth = 2) \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:10: unexpected '^'\n1: ggplot(data = dino_data, aes(x = x)) +\n2:   geom_****\n            ^\n```\n\n\n:::\n:::\n\n\n\n\n\nb. Overlay a density curve on the histogram.\n\n*Answer:* \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dino_data, aes(x = ____)) +\n  geom_histogram(aes(y = ________), binwidth = ____, fill = ) +\n  geom_density(color = \"____\")\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:1:35: unexpected input\n1: ggplot(data = dino_data, aes(x = __\n                                      ^\n```\n\n\n:::\n:::\n\n\n\n\n\n### Boxplot\n\n*Answer:* \n\na. Create a boxplot of the x variable for each dataset in datasaurus_dozen.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = datasaurus_dozen, aes(x = dataset, y = x)) +\n  geom_*****() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:10: unexpected '^'\n1: ggplot(data = datasaurus_dozen, aes(x = dataset, y = x)) +\n2:   geom_****\n            ^\n```\n\n\n:::\n:::\n\n\n\n\n\n### Faceting\n\n*Answer:* \n\na. Create a scatterplot of `x` vs. `y` for each dataset in `datasaurus_dozen` using `facet_wrap()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = datasaurus_dozen, aes(x = x, y = y)) +\n  geom_point() +\n  facet_***(~ ****) +\n  theme_minimal()\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:11: unexpected '*'\n2:   geom_point() +\n3:   facet_***\n             ^\n```\n\n\n:::\n:::\n\n\n\n\n\n### Variable Transformation\n\na. The scatterplot of the `dino` dataset without any transformations is given below. Complete the code and store the plot in an object called `p1.`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dino_data, aes(x = x, y = y)) +\n  geom_point() +\n  theme_minimal() \n```\n\n::: {.cell-output-display}\n![](class_activity_4_files/figure-pdf/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n\nb. Now, apply the square root transformation to both the `x` and `y` axes using the `scale_x_sqrt()` and `scale_y_sqrt()` functions in the `dino` dataset. Complete the code and store the plot in an object called `p2.`\n\n*Answer:* \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = dino_data, aes(x = x, y = y)) +\n  geom_****() +\n  scale_*****() +\n  scale_*****() +\n  theme_*****() \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:2:10: unexpected '^'\n1: ggplot(data = dino_data, aes(x = x, y = y)) +\n2:   geom_****\n            ^\n```\n\n\n:::\n:::\n\n\n\n\n\nc. Use `plot_layout()` and `plot_annotation` functions from `patchwork` package to plot the above two plots  side-by-side. \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n# your r-code\n```\n:::\n\n\n\n\n\n\nd. Use `grid.arrange()` function from `gridExtra` package to get similar results as in part c. \n\n*Answer:* \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gridExtra)\n# your r-code\n```\n:::\n",
    "supporting": [
      "class_activity_4_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}