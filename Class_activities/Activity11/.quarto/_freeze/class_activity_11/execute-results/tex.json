{
  "hash": "a296620ac7adda4b3fe28cca747ef3e0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class Activity 11\"\nauthor: \"Your name here\"\ndate: \" April 16 2024\"\nformat:\n  pdf: default\n  html:\n    df_print: paged\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n\n\n\n\n\n\n\\vspace*{1in}\n\n\n## Problem 1\n\nLet's learn about combining strings with different separators first.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplace <- \"Central Park\"\nactivity <- \"jogging\"\nactivities <- c(\"jogging\", \"picnicking\", \"boating\")\nmy_sentence <- str_c(place, \" is great for \", activity, \".\", sep = \"\")\n```\n:::\n\n\n\n\n\na. What happens when a `str_c` entry is a vector?\n\n*Answer:* \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_sentences <- str_c(place, \" is great for \", activities, \".\", sep = \"\")\n```\n:::\n\n\n\n\n\nb. How do you combine strings with `str_glue`?\n\n*Answer:* \n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nc. What does `str_flatten` do?\n\n*Answer:* \n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nd. What will using a `\\n` separator do in the command below?\n\n*Answer:* \n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\ne. Does `str_length` count spaces and special characters??\n\n*Answer:* \n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nf. How do you count the number of `e`'s in a string?\n\n*Answer:* \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntext <- \"The quick brown fox jumps over the lazy dog.\"\npattern <- \"e\"\nvowel_count <- \n## Error: <text>:4:0: unexpected end of input\n## 2: pattern <- \"e\"\n## 3: vowel_count <- \n##   ^\n```\n:::\n\n\n\n\n\n\ng. What happens with negative positions?\n\n*Answer:* \n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nh. How do you extract a `substring` with positive and negative positions?\n\n*Answer:* \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_sentence <- \"Central Park is great for jogging.\"\n```\n:::\n\n\n\n\n\ni. With a vector of positions?\n\n*Answer:* \n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\nj. How do you extract multiple `substrings` using a vector of positions?\n\n*Answer:* \n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n-----------------------------------------------------------------------\n\n## Problem 2\n\na. Use the string parsing functions that you learned today to do tasks described in the comments below: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns1 <- \"12%\"  # remove %\ns2 <- \"New Jersey_*\"  # remove _*\ns3 <- \"2,150\"    # remove comma(,)\ns4 <- \"Learning #datascience is fun!\"   # extract #datascience\ns5 <- \"123 Main St, Springfield, MA, 01101\"   # separate info\n\n# Cleaning steps\ns1_clean <- \ns2_clean <- \ns3_clean <- \ns4_clean <- \ns5_clean <- \n\n# Print cleaned strings\ns1_clean\n## Error in eval(expr, envir, enclos): object 's1_clean' not found\ns2_clean\n## Error in eval(expr, envir, enclos): object 's2_clean' not found\ns3_clean\n## Error in eval(expr, envir, enclos): object 's3_clean' not found\ns4_clean\n## Error in eval(expr, envir, enclos): object 's4_clean' not found\ns5_clean\n## Error in eval(expr, envir, enclos): object 's5_clean' not found\n```\n:::\n\n\n\n\n\n## Problem 3\n\na. Let's look at the following dataset containing information about movies and their release years. We'll extract the release year from the movie title, create a new column with decades, and count the number of movies in each decade.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sample dataset\nmovies <- tibble(\n  title = c(\n    \"The Godfather (1972)\", \"Pulp Fiction (1994)\", \"The Dark Knight (2008)\",\n    \"Forrest Gump (1994)\", \"The Shawshank Redemption (1994)\", \"The Matrix (1999)\",\n    \"Inception (2010)\", \"Interstellar (2014)\", \"Parasite (2019)\", \"Fight Club (1999)\"\n  )\n)\nmovies\n## # A tibble: 10 x 1\n##    title                          \n##    <chr>                          \n##  1 The Godfather (1972)           \n##  2 Pulp Fiction (1994)            \n##  3 The Dark Knight (2008)         \n##  4 Forrest Gump (1994)            \n##  5 The Shawshank Redemption (1994)\n##  6 The Matrix (1999)              \n##  7 Inception (2010)               \n##  8 Interstellar (2014)            \n##  9 Parasite (2019)                \n## 10 Fight Club (1999)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Processing the dataset\nmovies_processed <- movies %>%\n  mutate(\n    release_year = ),\n    decade = \n  ) %>%\n  count() \n\n# Print the processed dataset\nmovies_processed\n## Error: <text>:4:21: unexpected ','\n## 3:   mutate(\n## 4:     release_year = ),\n##                        ^\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}