{
  "hash": "abc03bdb409d2c100d3fde6c72f4c7a6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class Activity 8\"\nauthor: \"Your name here\"\ndate: \" April 10 2024\"\nformat:\n  pdf: default\n  html:\n    df_print: paged\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n\n\n\n\n\n\n## Your turn 1\n\nIn the provided R code, we start with two datasets, `DBP_wide` and `BP_wide`, representing blood pressure measurements in a wide format. We then demonstrate how to transform `BP_wide` into a long format using `pivot_longer()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBP_wide <- tibble(id = letters[1:4],\n sex = c(\"F\", \"M\", \"M\", \"F\"),\n v1.DBP = c(88, 84, 102, 70),\n v2.DBP = c(78, 78, 96, 76),\n v3.DBP = c(94, 82, 94, 74),\n age=c(23, 56, 41, 38)\n )\nDBP_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 6\n  id    sex   v1.DBP v2.DBP v3.DBP   age\n  <chr> <chr>  <dbl>  <dbl>  <dbl> <dbl>\n1 a     F         88     78     94    23\n2 b     M         84     78     82    56\n3 c     M        102     96     94    41\n4 d     F         70     76     74    38\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBP_wide <- tibble(id = letters[1:4],\n                     sex = c(\"F\", \"M\", \"M\", \"F\"),\n                     SBP_v1 = c(130, 120, 130, 119),\n                     SBP_v2 = c(110, 116, 136, 106),\n                     SBP_v3 = c(112, 122, 138, 118))\nBP_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 5\n  id    sex   SBP_v1 SBP_v2 SBP_v3\n  <chr> <chr>  <dbl>  <dbl>  <dbl>\n1 a     F        130    110    112\n2 b     M        120    116    122\n3 c     M        130    136    138\n4 d     F        119    106    118\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBP_long <- BP_wide %>% \n  pivot_longer(names_to = \"visit\", values_to = \"SBP\", SBP_v1:SBP_v3) %>% \n  mutate(visit = parse_number(visit))\nBP_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 x 4\n   id    sex   visit   SBP\n   <chr> <chr> <dbl> <dbl>\n 1 a     F         1   130\n 2 a     F         2   110\n 3 a     F         3   112\n 4 b     M         1   120\n 5 b     M         2   116\n 6 b     M         3   122\n 7 c     M         1   130\n 8 c     M         2   136\n 9 c     M         3   138\n10 d     F         1   119\n11 d     F         2   106\n12 d     F         3   118\n```\n\n\n:::\n:::\n\n\n\n\n\n### a. Create a long dataframe from `DBP_wide` based on the repeated DBP columns and save it as `DBP_long`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBP_long <- \n  \n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:4:0: unexpected end of input\n2:   \n3:   \n  ^\n```\n\n\n:::\n:::\n\n\n\n\n### b. Clean up the visit column of `DBP_long` so that the values are 1, 2, 3, and save it as `DBP_long`.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBP_long <- \n  \n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:4:0: unexpected end of input\n2:   \n3:   \n  ^\n```\n\n\n:::\n:::\n\n\n\n\n\n### c. Make `DBP_long` wide with column names visit.1, visit.2, visit.3 for the DBP values, and save it as `DBP_wide2`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nDBP_wide2 <- \n  \n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:4:0: unexpected end of input\n2:   \n3:   \n  ^\n```\n\n\n:::\n:::\n\n\n\n\n\n### d. Join `DBP_long` with `BP_long2` to create a single data frame with columns id, sex, visit, SBP, DBP, and age. Save this as `BP_both_long.`\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBP_both_long <-\n  \n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:4:0: unexpected end of input\n2:   \n3:   \n  ^\n```\n\n\n:::\n:::\n\n\n\n\n\n### e. Calculate the mean SBP and DBP for each visit and save the result as `mean_BP_by_visit.`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean_BP_by_visit <-\n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:0: unexpected end of input\n1: mean_BP_by_visit <-\n2:   \n  ^\n```\n\n\n:::\n:::\n\n\n\n\n\n## Your turn 2\n\n\n### a. Parsing Complex Dates: Use `dmy_hms()` to parse the following date-time string: \"25-Dec-2020 17:30:00\"\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparsed_date <- \n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:0: unexpected end of input\n1: parsed_date <- \n2:   \n  ^\n```\n\n\n:::\n:::\n\n\n\n\n\n### b. Advanced Date Arithmetic: Calculate the exact age in years for someone born on \"1995-05-15 09:30:00\".\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndob <- \n  \n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:4:0: unexpected end of input\n2:   \n3:   \n  ^\n```\n\n\n:::\n:::\n\n\n\n\n\n### c. Creating Date-Time Objects: Create a date-time object for March 15, 2020, 13:30:00 using `make_datetime()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_date_time <- \n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:3:0: unexpected end of input\n1: new_date_time <- \n2:   \n  ^\n```\n\n\n:::\n:::\n\n\n\n\n### d. Extracting Components from Date-Time Objects: Extract the year, month (as a number), day, hour, and minute from \"2022-07-01 14:45:00\".\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_date_time <- ymd_hms(\"2022-07-01 14:45:00\")\nextracted_components <- tibble(\n  year = ,\n  month =  ,\n  day =  ,\n  hour = ,\n  minute = \n)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object '' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nextracted_components\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'extracted_components' not found\n```\n\n\n:::\n:::\n\n\n\n\n\n### e. Advanced Date-Time Arithmetic with Periods: Add 2 months and 15 days to \"2021-08-01\".\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninitial_date <- ymd(\"2021-08-01\")\nnew_date <- \n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:4:0: unexpected end of input\n2: new_date <- \n3:   \n  ^\n```\n\n\n:::\n:::\n\n\n\n\n\n### f. Duration and Time Differences: Calculate the duration in days, weeks, months, and years between \"2019-04-01\" and \"2022-04-01\".\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstart_date <- ymd(\"2019-04-01\")\nend_date <- ymd(\"2022-04-01\")\ntime_diff <- end_date - start_date\nduration_days <- \nduration_weeks <- \nduration_months <- \nduration_years <- \n\nduration_results <- tibble(\n  days = duration_days,\n  weeks = duration_weeks,\n  months = duration_months,\n  years = duration_years\n)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: object 'duration_days' not found\n```\n\n\n:::\n\n```{.r .cell-code}\nduration_results\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in eval(expr, envir, enclos): object 'duration_results' not found\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}