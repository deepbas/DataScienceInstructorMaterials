{
  "hash": "8827db4ff60e56f792997e5e14265abd",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class Activity 2\"\nauthor: \"Your name here\"\ndate: \" March 20 2024\"\nformat:\n  pdf: default\n  html:\n    df_print: paged\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n\n\n\n\n\n\nIn this activity, we'll explore some basic data assignments and manipulations in R. Understanding these fundamental concepts will help you work effectively with data in R. Let's dive into some practical exercises.\n\n## a. Creating a Simple Vector\n\nVectors are one of the most basic data types in R. They hold elements of the same type. Let's create a vector containing all integers from 4 to 10. Call it `a1`.\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na1 <- 4:10\na1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\n\n\n\n## b. Creating a Vector of Even Integers\n\nNow, let's create a vector that only contains even integers from 4 to 10. Call it `a2`.\n\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na2 <- seq(4, 10, by=2)\na2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  4  6  8 10\n```\n\n\n:::\n:::\n\n\n\n\n\n## c. Adding Two Vectors\n\n\nWhat do you think happens when we add two vectors of the same length in R? Let's find out by adding `a1` and `a2.`\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na1_plus_a2 <- a1 + a2\na1_plus_a2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  8 11 14 17 12 15 18\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## d. Summing Up Vector Elements\n\n\nThe `sum()` function calculates the total sum of all the elements in a vector. Let's see how it works with our vector `a1.`\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsum(a1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 49\n```\n\n\n:::\n:::\n\n\n\n\n## e. Finding the Length of a Vector\n\n\nTo find out how many elements a vector has, we can use the `length()` function. Let's apply it to `a1`.\n\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(a1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n\n\n\n## f. Calculating the Average\n\nf. Use the `sum` and `length` commands to calculate the average of the values in `a1`.\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naverage_a1 <- sum(a1) / length(a1)\naverage_a1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7\n```\n\n\n:::\n:::\n\n\n\n\n\n## g. Conditional Operations with `ifelse()`\n\nThe ifelse() function is useful for performing conditional operations on vectors. It takes a condition, a result for TRUE values, and a result for FALSE values.\n\n*Answer:*\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Example: Replace even numbers with 1, and odd numbers with 0\nifelse(a1 %% 2 == 0, 1, 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0 1 0 1 0 1\n```\n\n\n:::\n:::\n\n\n\n\n## h. Combining Strings with paste()\n\nThe `paste()` function concatenates strings together. Let's combine some text with the elements of a vector.\n\n*Answer:*\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(\"Value is\", a1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Value is 4\"  \"Value is 5\"  \"Value is 6\"  \"Value is 7\"  \"Value is 8\" \n[6] \"Value is 9\"  \"Value is 10\"\n```\n\n\n:::\n:::\n\n\n\n\n## i. Creating a Matrix\n\nA matrix in R is a two-dimensional array that holds data of a single basic type. Let's create a simple matrix.\n\n*Answer:*\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_matrix <- matrix(1:9, nrow=3, ncol=3)\nmy_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n\n\n:::\n:::\n\n\n\n\n\n## j. Making a DataFrame using cbind or rbind\n\nData frames are used to store tabular data in R. They can be created using the `cbind()` (column-bind) or `rbind()` (row-bind) functions. Here's how:\n\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_cbind <- data.frame(cbind(a1, a2))\ndf_cbind\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  a1 a2\n1  4  4\n2  5  6\n3  6  8\n4  7 10\n5  8  4\n6  9  6\n7 10  8\n```\n\n\n:::\n\n```{.r .cell-code}\ndf_rbind <- data.frame(rbind(a1, a1)) \ndf_rbind\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     X1 X2 X3 X4 X5 X6 X7\na1    4  5  6  7  8  9 10\na1.1  4  5  6  7  8  9 10\n```\n\n\n:::\n:::\n\n\n\n\n\n## k. Creating a List\n\nLists in R can hold elements of different types. They are incredibly versatile. Let's create a simple list.\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_list <- list(numbers=a1, evenNumbers=a2, average=average_a1)\nmy_list\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$numbers\n[1]  4  5  6  7  8  9 10\n\n$evenNumbers\n[1]  4  6  8 10\n\n$average\n[1] 7\n```\n\n\n:::\n:::\n\n\n\n\n\n## l. *(Bonus)* What would the following evaluate to? Could you think of a reason. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(7, 5, 3, 9)\ny <- c(FALSE, factor(c(\"cellar\", \"door\")), 2)\nx - y\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7 4 1 7\n```\n\n\n:::\n:::\n\n\n\n\n*Answer:*\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}