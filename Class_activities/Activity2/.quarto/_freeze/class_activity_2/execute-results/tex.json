{
  "hash": "694bd8b0aaabaa4ccd15d842189d386d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class Activity 2\"\nauthor: \"Your name here\"\ndate: \" March 26 2024\"\nformat:\n  pdf: default\n  html:\n    df_print: paged\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n\n\n\n\n## Problem 1\n\n### Create and Save Your Name Trend Plot\n\nIn this problem, you will use R to explore the popularity of your name over time using the `babynames` package. You will then save this plot into a folder. Follow the steps below:\n\n1. Replace `\"Dee\"` with your own name in the code below.\n2. Run the code chunk to generate and save the plot in the `img/` folder.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(babynames)\nlibrary(stringr)\n\n# Replace 'Dee' with your name\nyour_name <- \"Dee\"\nyour_name_data <- babynames %>% filter(name == your_name)\n\nggplot(data=your_name_data, aes(x=year, y=prop)) +\n  geom_point(size = 3, alpha = 0.6) +\n  geom_line(aes(colour = sex), size = 1) +\n  scale_color_brewer(palette = \"Set1\") +\n  labs(x = 'Year', y = str_c('Proportion of Babies Named ', your_name),\n       title = str_c('Trends in Names: ', your_name)) \n```\n:::\n\n\n\n\n\n\n### Load and Display Your Saved Plot\n\nAfter saving your plot in the `img/` folder, the next task is to load and display the saved image. This demonstrates how to reuse images in your R Markdown documents.\n\n1. Ensure your plot was saved in the previous task.\n2. Use the code below to load and display your saved plot image. Hint: need to toggle `eval` inside the R-code chunk options to `TRUE.`\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknitr::include_graphics(\"img/your-plot-filename.png\")\n```\n:::\n\n\n\n\n\n## Problem 2\n\n\nIn this problem, we'll explore some basic data assignments and manipulations in R. Understanding these fundamental concepts will help you work effectively with data in R. Let's dive into some practical exercises.\n\n## a. Creating a Simple Vector\n\nVectors are one of the most basic data types in R. They hold elements of the same type. Let's create a vector containing all integers from 4 to 10. Call it `a1`.\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## b. Creating a Vector of Even Integers\n\nNow, let's create a vector that only contains even integers from 4 to 10. Call it `a2`.\n\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## c. Adding Two Vectors\n\n\nWhat do you think happens when we add two vectors of the same length in R? Let's find out by adding `a1` and `a2.`\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n## d. Summing Up Vector Elements\n\n\nThe `sum()` function calculates the total sum of all the elements in a vector. Let's see how it works with our vector `a1.`\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## e. Finding the Length of a Vector\n\n\nTo find out how many elements a vector has, we can use the `length()` function. Let's apply it to `a1`.\n\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## f. Calculating the Average\n\nf. Use the `sum` and `length` commands to calculate the average of the values in `a1`.\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## g. Conditional Operations with `ifelse()`\n\nThe ifelse() function is useful for performing conditional operations on vectors. It takes a condition, a result for TRUE values, and a result for FALSE values.\n\n*Answer:*\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## h. Combining Strings with paste()\n\nThe `paste()` function concatenates strings together. Let's combine some text with the elements of a vector.\n\n*Answer:*\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## i. Creating a Matrix\n\nA matrix in R is a two-dimensional array that holds data of a single basic type. Let's create a simple matrix.\n\n*Answer:*\n\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## j. Making a DataFrame using cbind or rbind\n\nData frames are used to store tabular data in R. They can be created using the `cbind()` (column-bind) or `rbind()` (row-bind) functions. Here's how:\n\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## k. Creating a List\n\nLists in R can hold elements of different types. They are incredibly versatile. Let's create a simple list.\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## l. *(Bonus)* What would the `x - y` evaluate to? Could you think of a reason. \n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(7, 5, 3, 9)\ny <- c(FALSE, factor(c(\"cellar\", \"wine\")), 2)\n# x - y\n```\n:::\n\n\n\n\n*Answer:*\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}