---
title: "Class Activity 2"
author: "Your name here"
date: "`r format(Sys.Date(), ' %B %d %Y')`"
format:
  pdf: default
  html:
    df_print: paged
editor: visual
execute: 
  eval: true
  echo: true
  warning: false
  error: true
---

In this activity, we'll explore some basic data assignments and manipulations in R. Understanding these fundamental concepts will help you work effectively with data in R. Let's dive into some practical exercises.

## a. Creating a Simple Vector

Vectors are one of the most basic data types in R. They hold elements of the same type. Let's create a vector containing all integers from 4 to 10. Call it `a1`.

*Answer:*

```{r}
a1 <- 4:10
a1
```

## b. Creating a Vector of Even Integers

Now, let's create a vector that only contains even integers from 4 to 10. Call it `a2`.

*Answer:*

```{r}
a2 <- seq(4, 10, by=2)
a2
```

## c. Adding Two Vectors

What do you think happens when we add two vectors of the same length in R? Let's find out by adding `a1` and `a2.`

*Answer:*

```{r}
a1_plus_a2 <- a1 + a2
a1_plus_a2
```

## d. Summing Up Vector Elements

The `sum()` function calculates the total sum of all the elements in a vector. Let's see how it works with our vector `a1.`

*Answer:*

```{r}
sum(a1)
```

## e. Finding the Length of a Vector

To find out how many elements a vector has, we can use the `length()` function. Let's apply it to `a1`.

*Answer:*

```{r}
length(a1)
```

## f. Calculating the Average

f.  Use the `sum` and `length` commands to calculate the average of the values in `a1`.

*Answer:*

```{r}
average_a1 <- sum(a1) / length(a1)
average_a1
```

## g. Conditional Operations with `ifelse()`

The ifelse() function is useful for performing conditional operations on vectors. It takes a condition, a result for TRUE values, and a result for FALSE values.

*Answer:*

```{r}
# Example: Replace even numbers with 1, and odd numbers with 0
ifelse(a1 %% 2 == 0, 1, 0)
```

## h. Combining Strings with paste()

The `paste()` function concatenates strings together. Let's combine some text with the elements of a vector.

*Answer:*

```{r}
paste("Value is", a1)
```

## i. Creating a Matrix

A matrix in R is a two-dimensional array that holds data of a single basic type. Let's create a simple matrix.

*Answer:*

```{r}
my_matrix <- matrix(1:9, nrow=3, ncol=3)
my_matrix
```

## j. Making a DataFrame using cbind or rbind

Data frames are used to store tabular data in R. They can be created using the `cbind()` (column-bind) or `rbind()` (row-bind) functions. Here's how:

*Answer:*

```{r}
df_cbind <- data.frame(cbind(a1, a2))
df_cbind

df_rbind <- data.frame(rbind(a1, a1)) 
df_rbind
```

## k. Creating a List

Lists in R can hold elements of different types. They are incredibly versatile. Let's create a simple list.

*Answer:*

```{r}
my_list <- list(numbers=a1, evenNumbers=a2, average=average_a1)
my_list
```

## l. *(Bonus)* What would the following evaluate to? Could you think of a reason.

```{r}
x <- c(7, 5, 3, 9)
y <- c(FALSE, factor(c("cellar", "door")), 2)
x - y
```

*Answer:*
