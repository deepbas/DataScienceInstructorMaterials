{
  "hash": "032f9cd75b7a677567bcc38f52891a98",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class Activity 18\"\nauthor: \"Your name here\"\ndate: \" May 05 2024\"\nformat:\n  html:\n    df_print: paged\n    editor: visual\nserver: shiny\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n\n\n\n\n\n\n## Basic Shiny App for Tracking COVID-19 Trends\n\nThe Shiny app you are developing will allow users to interactively select parameters such as month, year, and county to visualize COVID-19 trends in Minnesota based on real-time data scraping and manipulation.\n\n### Read Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable_usafacts <- bow(url = \"https://usafacts.org/visualizations/coronavirus-covid-19-spread-map/state/minnesota\") %>%\n  scrape() %>%  html_nodes(\"a\") %>%       # find all links\n  html_attr(\"href\") %>%     # get the url\n  str_subset(\".csv\")        # find those that end in csv\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\ncovid_data <- read_csv(table_usafacts[2]) %>% filter(State == \"MN\") %>% \n  select(-countyFIPS, -StateFIPS, -State) %>% \n  slice(-1) %>% \n  pivot_longer(-1, names_to = \"Dates\", values_to = \"Cases\") %>% \n  janitor::clean_names() %>% \n  mutate(county_name = str_remove(county_name, \" County\"), \n         dates = ymd(dates), \n         counties = as.factor(str_remove(county_name, \" County\")), \n         month = month(dates), \n         year = year(dates)) %>%\n  select(-county_name)\nhead(covid_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 5\n  dates      cases counties month  year\n  <date>     <dbl> <fct>    <dbl> <dbl>\n1 2020-01-22     0 Aitkin       1  2020\n2 2020-01-23     0 Aitkin       1  2020\n3 2020-01-24     0 Aitkin       1  2020\n4 2020-01-25     0 Aitkin       1  2020\n5 2020-01-26     0 Aitkin       1  2020\n6 2020-01-27     0 Aitkin       1  2020\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# County level data\ncounty_names <- covid_data %>% pull(counties) %>% unique()\ncounty_data <- map(county_names, ~filter(covid_data, counties == .x))\n```\n:::\n\n\n\n\nYou're already given the code to scrape, clean, and manipulate the data. Ensure that the data frame `covid_data` is correctly formatted, with each row representing a unique combination of date and county case counts. The transformations include:\n\n- Pivoting the data to a long format where each date-case pair is a row.\n- Cleaning column names and extracting relevant date components (e.g., month, year).\n\n\n### Building the Shiny UI\n\nThe `ui`  object defines the layout and appearance of your app. Start with a basic structure:\n\n- `Title Panel`: Displays the title of your app at the top.\n- `Sidebar Layout`: Contains two main parts:\n  - `Sidebar Panel`: Includes interactive controls like sliders, radio buttons, and dropdown menus to filter the data.\n  - `Main Panel`: Displays the outputs (graphs and tables) based on user inputs.\n  \n  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\" \"),\n  sidebarLayout(\n    sidebarPanel(\" \"),\n    mainPanel(\" \")\n  )\n)\n\nserver <- function(input, output) {}\nshinyApp(ui = ui, server = server)\n```\n\n::: {.cell-output-display}\n![](Class-activity-18_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n### Adding Interactive Inputs\n\nPopulate the sidebar with input controls:\n- `Sliderinput`: Allows selection of the range of months.\n- `RadioButtons`: Enables choosing the year.\n- `SelectInput`: Dropdown to select the county from available data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"Tracking Covid in Minnesota\"),\n  sidebarLayout(\n    sidebarPanel(\n      \n      \n      \n    ),\n    mainPanel(\"\")\n  )\n)\n\nserver <- function(input, output) {}\nshinyApp(ui = ui, server = server, options = list(height = 800))\n```\n\n::: {.cell-output-display}\n![](Class-activity-18_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n### Configuring Outputs in UI\n\nDefine placeholders in the main panel where outputs will be rendered:\n\n- `plotOutput`: To display trend plots.\n- `tableOutput`: To show data tables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"Tracking Covid in Minnesota\"),\n  sidebarLayout(\n    sidebarPanel(\n      \n      \n    ),\n    mainPanel(\n      \n      \n    )\n  )\n)\n\nserver <- function(input, output) {}\nshinyApp(ui = ui, server = server, options = list(height = 800))\n```\n\n::: {.cell-output-display}\n![](Class-activity-18_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n## Writing the Server Function\n\nThe `server` part of your Shiny app listens for changes in the inputs and dynamically updates the outputs.\nHere's how you can set it up:\n\n- `Reactive Expression`: Creates a subset of `covid_data` based on user inputs. This reactive expression ensures that any change in inputs automatically triggers data filtering.\n- Render Functions:\n  - `renderPlot`: Generates and renders a plot based on the filtered data.\n  - `renderDataTable`: Displays the filtered data as a table.\n\n### Running the App\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nui <- \n  \n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: <text>:4:0: unexpected end of input\n2: ui <- \n3:   \n  ^\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output) {\n    filtered_data <- reactive({\n    \n      \n      \n      })\n\n    output$plot <- renderPlot({\n  \n      \n      \n      \n      })\n\n    output$table <- DT::renderDataTable({\n        filtered_data()})\n        \n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\napp <- shinyApp(ui = ui, server = server, options = list(height = 1200))\napp\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError: ! in callr subprocess.\nCaused by error in `s$close()`:\n! attempt to apply non-function\n```\n\n\n:::\n:::\n\n\n\n\n### **(Time permitting)** Additional Layout\n\nTo enhance your Shiny app, first install and load the `shinythemes` package to access additional aesthetic themes. Update your UI to utilize a `navbarPage` structure, incorporating `tabPanel` elements to separate the plot and data table into distinct tabs. Apply one of the themes, such as \"cerulean\", to improve the visual appeal and user experience of your app. Replace the month and year selection inputs in your Shiny app with a `dateRangeInput` to allow users to select a specific date range for viewing COVID-19 trends.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(shinythemes)\n\nui1 <- navbarPage(theme = shinytheme(\"cerulean\"), title = \"Tracking Covid in Minnesota\",\n  tabPanel(\"Plot\",\n    fluidPage(\n      titlePanel(\"Covid Trends by County\"),\n      sidebarLayout(\n        sidebarPanel(\n          ## FILL IN HERE  \n        ),\n        mainPanel(\n          plotOutput(outputId = \"plot\")\n        )\n      )\n    )\n  ),\n  tabPanel(\"Data\",\n    fluidPage(\n      titlePanel(\"Covid Data Table\"),\n      sidebarLayout(\n        sidebarPanel(),  \n        mainPanel(\n          DT::dataTableOutput(outputId = \"table\")\n        )\n      )\n    )\n  )\n)\n\n\nserver1 <- function(input, output) {\n  filtered_data <- reactive({\n    subset(covid_data, \n           counties %in% input$dv &\n           dates >= input$dateRange[1] & dates <= input$dateRange[2])\n  })\n\n  output$plot <- renderPlot({\n    data <- filtered_data()  \n    ggplot(data, aes(x = dates, y = cases, color = counties)) +\n      geom_point(alpha = 0.5, color = \"blue\") +\n      labs(y = \"Number of Cases\", x = \"Date\") +\n      theme_minimal()\n  })\n\n\n  output$table <- DT::renderDataTable({\n    filtered_data()  \n  })\n}\n\napp1 <- shinyApp(ui = ui1, server = server1, options = list(height = 1200))\napp1\n```\n\n::: {.cell-output-display}\n![](Class-activity-18_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\npreserve11454448756bbfc8\npreserve92453cfb34c07407\n\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"dependencies\">\n{\"type\":\"list\",\"attributes\":{},\"value\":[]}\n</script>\n<!--/html_preserve-->\n<!--html_preserve-->\n<script type=\"application/shiny-prerendered\" data-context=\"execution_dependencies\">\n{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\"]}},\"value\":[{\"type\":\"list\",\"attributes\":{\"names\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"packages\",\"version\"]},\"class\":{\"type\":\"character\",\"attributes\":{},\"value\":[\"data.frame\"]},\"row.names\":{\"type\":\"integer\",\"attributes\":{},\"value\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103]}},\"value\":[{\"type\":\"character\",\"attributes\":{},\"value\":[\"assertthat\",\"base\",\"bit\",\"bit64\",\"bslib\",\"cachem\",\"callr\",\"chromote\",\"cli\",\"colorspace\",\"compiler\",\"crayon\",\"crosstalk\",\"curl\",\"data.table\",\"datasets\",\"digest\",\"dplyr\",\"DT\",\"ellipsis\",\"evaluate\",\"fansi\",\"fastmap\",\"forcats\",\"fs\",\"generics\",\"ggplot2\",\"ggthemes\",\"glue\",\"graphics\",\"grDevices\",\"grid\",\"gtable\",\"hms\",\"htmltools\",\"htmlwidgets\",\"httpuv\",\"httr\",\"janitor\",\"jquerylib\",\"jsonlite\",\"knitr\",\"later\",\"lazyeval\",\"lifecycle\",\"lubridate\",\"magrittr\",\"memoise\",\"methods\",\"mime\",\"munsell\",\"parallel\",\"pillar\",\"pkgconfig\",\"plotly\",\"polite\",\"processx\",\"promises\",\"ps\",\"purrr\",\"R6\",\"ragg\",\"ratelimitr\",\"Rcpp\",\"readr\",\"rlang\",\"rmarkdown\",\"robotstxt\",\"rstudioapi\",\"rvest\",\"sass\",\"scales\",\"selectr\",\"shiny\",\"shinythemes\",\"snakecase\",\"spiderbar\",\"stats\",\"stringi\",\"stringr\",\"systemfonts\",\"textshaping\",\"tibble\",\"tidyr\",\"tidyselect\",\"tidyverse\",\"timechange\",\"tools\",\"tzdb\",\"usethis\",\"utf8\",\"utils\",\"vctrs\",\"viridisLite\",\"vroom\",\"webshot\",\"webshot2\",\"websocket\",\"withr\",\"xfun\",\"xml2\",\"xtable\",\"yaml\"]},{\"type\":\"character\",\"attributes\":{},\"value\":[\"0.2.1\",\"4.3.3\",\"4.0.5\",\"4.0.5\",\"0.7.0\",\"1.0.8\",\"3.7.6\",\"0.1.2\",\"3.6.2\",\"2.1-0\",\"4.3.3\",\"1.5.2\",\"1.2.1\",\"5.2.1\",\"1.15.4\",\"4.3.3\",\"0.6.35\",\"1.1.4\",\"0.31\",\"0.3.2\",\"0.23\",\"1.0.6\",\"1.1.1\",\"1.0.0\",\"1.6.3\",\"0.1.3\",\"3.5.0\",\"5.0.0\",\"1.7.0\",\"4.3.3\",\"4.3.3\",\"4.3.3\",\"0.3.4\",\"1.1.3\",\"0.5.8.1\",\"1.6.4\",\"1.6.14\",\"1.4.7\",\"2.2.0\",\"0.1.4\",\"1.8.8\",\"1.45\",\"1.3.2\",\"0.2.2\",\"1.0.4\",\"1.9.3\",\"2.0.3\",\"2.0.1\",\"4.3.3\",\"0.12\",\"0.5.1\",\"4.3.3\",\"1.9.0\",\"2.0.3\",\"4.10.3\",\"0.1.3\",\"3.8.4\",\"1.2.1\",\"1.7.6\",\"1.0.2\",\"2.5.1\",\"1.2.7\",\"0.4.1\",\"1.0.12\",\"2.1.5\",\"1.1.3\",\"2.26\",\"0.7.13\",\"0.15.0\",\"1.0.3\",\"0.4.9\",\"1.3.0\",\"0.4-2\",\"1.8.0\",\"1.2.0\",\"0.11.1\",\"0.2.5\",\"4.3.3\",\"1.8.3\",\"1.5.1\",\"1.0.5\",\"0.3.7\",\"3.2.1\",\"1.3.1\",\"1.2.1\",\"2.0.0\",\"0.3.0\",\"4.3.3\",\"0.4.0\",\"2.2.2\",\"1.2.4\",\"4.3.3\",\"0.6.5\",\"0.4.2\",\"1.6.5\",\"0.5.5\",\"0.1.1\",\"1.4.1\",\"3.0.0\",\"0.43\",\"1.3.6\",\"1.8-4\",\"2.3.8\"]}]}]}\n</script>\n<!--/html_preserve-->",
    "supporting": [
      "Class-activity-18_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {
      "preserve11454448756bbfc8": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-start\">\nlibrary(tidyverse)\nlibrary(shiny)\nlibrary(readr)\nlibrary(janitor)\nlibrary(purrr)\nlibrary(lubridate)\nlibrary(plotly)\nlibrary(DT)\nlibrary(ggthemes)\nlibrary(rvest)\nlibrary(polite)\n</script>\n",
      "preserve92453cfb34c07407": "\n<script type=\"application/shiny-prerendered\" data-context=\"server-extras\">\nojs_define <- function(..., .session = shiny::getDefaultReactiveDomain()) {\n  quos <- rlang::enquos(...)\n  vars <- rlang::list2(...)\n  nm <- names(vars)\n  if (is.null(nm)) {\n    nm <- rep_len(\"\", length(vars))\n  }\n  mapply(function(q, nm, val) {\n    # Infer name, if possible\n    if (nm == \"\") {\n      tryCatch({\n        nm <- rlang::as_name(q)\n      }, error = function(e) {\n        code <- paste(collapse = \"\\n\", deparse(rlang::f_rhs(q)))\n        stop(\"ojs_define() could not create a name for the argument: \", code)\n      })\n    }\n    .session$output[[nm]] <- val\n    outputOptions(.session$output, nm, suspendWhenHidden = FALSE)\n    .session$sendCustomMessage(\"ojs-export\", list(name = nm))\n    NULL\n  }, quos, nm, vars, SIMPLIFY = FALSE, USE.NAMES = FALSE)\n  invisible()\n}\n</script>\n"
    },
    "postProcess": true
  }
}