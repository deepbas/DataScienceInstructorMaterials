{
  "hash": "34d751a573e01567f98418e63aead32a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Class Activity 3\"\nauthor: \"Your name here\"\ndate: \" March 20 2024\"\nformat:\n  pdf: default\n  html:\n    df_print: paged\neditor: visual\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  error: true\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the necessary libraries\nlibrary(tidyverse)\nlibrary(ggplot2)\nlibrary(babynames)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# some interesting data objects\nx <- c(3,6,9,5,10)\nx.mat <- cbind(x, 2*x)\nx.df <- data.frame(x=x,double.x=x*2)\nmy.list <- list(myVec=x, myDf=x.df, myString=c(\"hi\",\"bye\"))\n```\n:::\n\n\n\n\n### Question 1: data types\n\n- What data type is `x`? \n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(babynames$number)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"NULL\"\n```\n\n\n:::\n:::\n\n\n\n\n- What data type is `c(x, x/2)`?\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\ntypeof(c(x, babynames$year))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n\n\n- What data type is `c(x,NA)`?  What data type is `c(x,\"NA\")`?\n\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\ntypeof(c(x, NA))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(c(x, \"NA\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n\n### Question 2: Subsetting and coercion\n\n- How can we reverse the order of entries in `x`?\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nrev(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  5  9  6  3\n```\n\n\n:::\n\n```{.r .cell-code}\nx[length(x):1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  5  9  6  3\n```\n\n\n:::\n:::\n\n\n\n\n\n- What does `which(x < 5)` equal?\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nwhich(x<5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n\n- Extract the element of x that corresponds to the location in the preceding question.\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nx[which(x<5)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n\n\n- What does `sum(c(TRUE,FALSE,TRUE,FALSE))` equal?\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nsum(c(TRUE,FALSE,TRUE,FALSE))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\n- What does `sum(x[c(TRUE,FALSE,TRUE,FALSE)])` equal?\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nsum(x[c(TRUE,FALSE,TRUE,FALSE, TRUE)])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n\n\n\n- What does `sum(x < 5)` equal?\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nsum(x < 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n- What does `sum(x[x < 5])` equal?\n\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nsum(x[x < 5])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\n\n\n- Why `dim(x.mat[1:2,1])` return `NULL` while `dim(x.mat[1:2,1:2])` returns a dimension?\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\ndim(x.mat[1:2,1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(x.mat[1:2,1:2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 2\n```\n\n\n:::\n:::\n\n\n\n\n\n### Question 3: Lists\n\n- Using `my.list`, show three ways to write one command that gives the 3rd entry of variable `x` in data frame `myDf`\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nmy.list[[1]][3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nmy.list[[\"myVec\"]][3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nmy.list[1]$myVec[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n\n```{.r .cell-code}\nmy.list$myVec[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n\n\n\n- What class of object does the command `my.list[3]` return?\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nclass(my.list[3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n\n\n- What class of object does the command `my.list[[3]]` return?\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nclass(my.list[[3]])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n\n- What class of object does the command `unlist(my.list)` return? Why are all the entries `character`s?\n\n*Answer:*\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code\nclass(unlist(my.list))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}